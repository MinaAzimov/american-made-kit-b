function Dispatcher() {
    this.events = []
}
Dispatcher.prototype.addEventlistener = function(t, e) {
    this.events[t] = this.events[t] || [], this.events[t] && this.events[t].push(e)
}, Dispatcher.prototype.removeEventlistener = function(t, e) {
    if (this.events[t])
        for (var i = this.events[t], s = i.length - 1; s >= 0; --s)
            if (i[s] === e) return i.splice(s, 1), !0;
    return !1
}, Dispatcher.prototype.dispatch = function(t, e) {
    if (this.events[t])
        for (var i = this.events[t], s = i.length; s--;) i[s](this, e)
}, SoundManager = function(t) {
    this.soundsData = t ? t : [], this.muted = !1, this.dispatcher = new Dispatcher, this.init()
}, SoundManager.prototype = {
    constructor: SoundManager,
    init: function() {
        this.soundsData.forEach(this.addSound.bind(this)), this.bindEvents()
    },
    bindEvents: function() {
        this.dispatcher.addEventlistener("MUTE_MUSIC", this.muteAll.bind(this)), this.dispatcher.addEventlistener("UNMUTE_MUSIC", this.unMute.bind(this))
    },
    addSound: function(t) {
        this[t.id] = new Howl({
            urls: [t.src],
            format: [t.type],
            volume: t.volume,
            loop: t.loop
        })
    },
    play: function(t) {
        this.muted || this[t].play()
    },
    pause: function(t) {
        this[t].pause()
    },
    volume: function(t, e) {
        this[t].volume(e)
    },
    muteAll: function() {
        Howler.mute(), this.muted = !0
    },
    unMute: function() {
        Howler.unmute(), this.muted = !1
    }
}, YTVID = function(t) {
    this.containerID = t.containerID, this.id = t.id, this.height = void 0 !== t.height ? t.height : 720, this.width = void 0 !== t.width ? t.width : 1280, this.dispatcher = void 0 !== t.dispatcher ? t.dispatcher : new Dispatcher, this.playerVars = {
        modestbranding: 1,
        origin: "",
        nologo: 1,
        autoplay: void 0 !== t.autoplay ? t.autoplay : 0,
        controls: void 0 !== t.controls ? t.controls : 1,
        hd: 1,
        autohide: 1,
        showinfo: void 0 !== t.info ? t.info : 1,
        rel: 0,
        frameborder: 0,
        loop: void 0 !== t.loop ? t.loop : 0
    }, this.muteStart = void 0 !== t.mute && t.mute, t.list && (this.playerVars.listType = "playlist", this.playerVars.list = t.id, this.playerVars.index = void 0 !== t.index ? t.index : 0), this.ready = !1
}, YTVID.prototype = {
    constructor: YTVID,
    add: function() {
        this.player = new YT.Player(this.containerID, {
            videoId: this.id,
            width: this.width,
            height: this.height,
            allowFullScreen: !0,
            playerVars: this.playerVars,
            events: {
                onReady: this.onPlayerReady.bind(this),
                onStateChange: this.onPlayerStateChange.bind(this),
                onError: this.onPLayerError.bind(this)
            }
        })
    },
    time: function() {
        return this.player.getCurrentTime()
    },
    duration: function() {
        return this.player.getDuration()
    },
    isPlaying: function() {
        return 1 === this.player.getPlayerState()
    },
    isMuted: function() {
        return this.player.isMuted()
    },
    onPLayerError: function(t) {
        this.dispatcher.dispatch("YT_ERROR", this.id)
    },
    onPlayerReady: function(t) {
        this.ready = !0, this.fullViewport && (this.ytChild = document.getElementById(this.containerID + "-child"), this.setFullViewChildStyles(this.ytChild)), this.dispatcher.dispatch("YT_READY", this.id), this.muteStart && this.player.mute()
    },
    onPlayerStateChange: function(t) {
        this.dispatcher.dispatch("YT_STATE_CHANGE", t.data)
    },
    next: function() {
        switch (this.player.getPlaylistIndex()) {
            case 0:
                console.log(0), this.player.playVideoAt(0);
                break;
            case 1:
                console.log(1), this.player.playVideoAt(1);
                break;
            case 2:
                console.log(2), this.player.playVideoAt(2);
                break;
            case 3:
                console.log(3), this.player.playVideoAt(5);
                break;
            case 4:
                console.log(3), this.player.playVideoAt(5);
                break;
            case 5:
                console.log(4), this.player.playVideoAt(6)
        }
    },
    previous: function() {
        console.log(this.player.getPlaylistIndex()), this.player.getPlaylistIndex() > 4 ? this.playerVars.list && this.player.playVideoAt(2) : this.playerVars.list && this.player.previousVideo()
    },
    play: function() {
        this.ready && this.player.playVideo()
    },
    seek: function(t) {
        this.ready && this.player.seekTo(t)
    },
    restart: function() {
        this.ready && (this.player.seekTo(0), this.player.playVideo())
    },
    pause: function() {
        this.ready && this.player.pauseVideo()
    },
    stop: function() {
        this.ready && this.player.stopVideo()
    },
    mute: function() {
        this.ready && this.player.mute()
    },
    unmute: function() {
        this.ready && this.player.unMute()
    },
    playVideoAt: function(t) {
        this.ready && this.player.playVideoAt(t)
    },
    cuePlaylist: function(t) {
        this.ready && this.player.cuePlaylist({
            list: this.id,
            index: t
        })
    }
};
var tmp = function() {};
tmp.prototype = YTVID.prototype, Trailer = function(t, e) {
    this.paramaters = t, this.containerID = t.containerID, this.updateTime, this.scrollPos = 0, t.width = "100%", t.height = "100%", this.createFullViewPort(), t.containerID = t.containerID + "-child", YTVID.call(this, t, e), this.bindEvents(), this.paramaters.customControls && this.onVideoResize(), this.offset = $("#" + this.paramaters.customButtons.scrubber).offset()
}, Trailer.prototype = new tmp, Trailer.prototype.constructor = Trailer, Trailer.prototype.createFullViewPort = function() {
    this.view = document.getElementById(this.containerID), this.view.style.position = "fixed", this.view.style.left = "100vw", this.view.style.top = "0px", this.view.style.width = "100vw", this.view.style.height = "100vh", this.view.style.overflow = "hidden", this.view.style.display = "none", this.paramaters.customBackground || (this.view.style.backgroundColor = "black"), this.ytChild = document.createElement("div"), this.ytChild.id = this.containerID + "-child", this.paramaters.customControls && (this.ytChild.style.position = "absolute", this.ytChild.style.height = this.ytChild.style.width = "100vw"), this.view.appendChild(this.ytChild)
}, Trailer.prototype.bindEvents = function() {
    document.getElementById(this.paramaters.closeBtn).addEventListener("click", this.onTrailerClose.bind(this)), this.dispatcher.addEventlistener("SHOW_TRAILER", this.show.bind(this)), this.dispatcher.addEventlistener("CUE_PLAYLIST_INDEX", this.cuePlaylistIndex.bind(this)), this.paramaters.customControls && (window.addEventListener("resize", this.onVideoResize.bind(this)), document.getElementById(this.paramaters.customButtons.playBtn).addEventListener("click", this.onPlayToggle.bind(this)), document.getElementById(this.paramaters.customButtons.prevBtn).addEventListener("click", this.onPrevPlaylist.bind(this)), document.getElementById(this.paramaters.customButtons.nextBtn).addEventListener("click", this.onNextPlaylist.bind(this)), document.getElementById(this.paramaters.customButtons.soundBtn).addEventListener("click", this.onSoundToggle.bind(this)), document.getElementById(this.paramaters.customButtons.scrubber).addEventListener("click", this.onScrub.bind(this))), this.dispatcher.addEventlistener("PLAY_TRAILER", this.play.bind(this)), this.dispatcher.addEventlistener("PAUSE_TRAILER", this.pause.bind(this)), $("#yt-close").mouseenter(function() {
        TweenMax.set($(this).find(".close-outer"), {
            transformOrigin: "50% 50%"
        }), TweenMax.set($(this).find(".close-inner"), {
            transformOrigin: "50% 50%"
        }), TweenMax.set($(this).find(".close-img"), {
            transformOrigin: "50% 50%"
        }), TweenMax.to($(this).find(".close-outer"), .25, {
            scale: 1.2,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".close-inner"), .25, {
            scale: 1.15,
            border: "1px solid rgba(255, 254, 237, 0.75)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".close-img"), .4, {
            rotation: 90,
            ease: Power3.easeOut
        })
    }).mouseleave(function() {
        TweenMax.to($(this).find(".close-outer"), .25, {
            scale: 1,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".close-inner"), .25, {
            scale: 1,
            border: "1px solid rgba(255, 254, 237, 0.2)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".close-img"), .4, {
            rotation: 0,
            ease: Power3.easeOut
        })
    }), $(".yt-btn").mouseenter(function() {
        TweenMax.to($(this).find(".yt-inner"), .4, {
            border: "1px solid rgba(255, 254, 237, 0.75)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-content"), .4, {
            opacity: 1,
            ease: Power3.easeOut
        })
    }).mouseleave(function() {
        TweenMax.to($(this).find(".yt-inner"), .4, {
            border: "1px solid rgba(255, 254, 237, 0.2)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-content"), .4, {
            opacity: .6,
            ease: Power3.easeOut
        })
    }), $("#yt-previous").mouseenter(function() {
        TweenMax.to($(this).find(".yt-playlist_over"), .4, {
            clip: "rect(0px, 124px, 34px, 0px)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text p"), .4, {
            x: 3,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text img"), .4, {
            x: -3,
            opacity: 1,
            ease: Power3.easeOut
        })
    }).mouseleave(function() {
        TweenMax.to($(this).find(".yt-playlist_over"), .4, {
            clip: "rect(0px, 124px, 34px, 124px)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text p"), .4, {
            x: -6,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text img"), .4, {
            x: 6,
            opacity: 0,
            ease: Power3.easeOut
        })
    }), $("#yt-next").mouseenter(function() {
        TweenMax.to($(this).find(".yt-playlist_over"), .4, {
            clip: "rect(0px, 124px, 34px, 0px)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text p"), .4, {
            x: -3,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text img"), .4, {
            x: 9,
            opacity: 1,
            ease: Power3.easeOut
        })
    }).mouseleave(function() {
        TweenMax.to($(this).find(".yt-playlist_over"), .4, {
            clip: "rect(0px, 0px, 34px, 0px)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text p"), .4, {
            x: 6,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text img"), .4, {
            x: 0,
            opacity: 0,
            ease: Power3.easeOut
        })
    })
}, Trailer.prototype.onTrailerClose = function(t) {
    this.hide()
}, Trailer.prototype.onPlayToggle = function(t) {
    this.isPlaying() === !0 ? (this.pause(), $("#yt-playtoggle .yt-inner img").attr("src", "img/trailer-play.png"), $(".play-button").addClass("paused")) : this.isPlaying() === !1 && (this.play(), $("#yt-playtoggle .yt-inner img").attr("src", "img/trailer-pause.png"), $(".play-button").removeClass("paused"))
}, Trailer.prototype.onSoundToggle = function(t) {
    this.isMuted() === !0 ? (this.unmute(), $("#trailer_bars .bar").addClass("barOn")) : this.isMuted() === !1 && (this.mute(), $("#trailer_bars .bar").removeClass("barOn"))
}, Trailer.prototype.onPrevPlaylist = function(t) {
    this.previous()
}, Trailer.prototype.onNextPlaylist = function(t) {
    this.next()
}, Trailer.prototype.onScrub = function(t) {
    this.seek(Math.floor((t.pageX - (this.offset.left - window.innerWidth)) / $("#" + this.paramaters.customButtons.scrubber).width() * this.duration())), $("#yt-progress-indicator").css("width", (t.pageX - (this.offset.left - window.innerWidth)) / $("#" + this.paramaters.customButtons.scrubber).width() * 100 + "%")
}, Trailer.prototype.onPlayerStateChange = function(t) {
    1 === t.data ? (this.updateTime = setInterval(this.displayTime.bind(this), 500), $(".play-button").removeClass("paused")) : (clearInterval(this.updateTime), $(".play-button").addClass("paused"))
}, Trailer.prototype.displayTime = function(t) {
    TweenMax.to($("#yt-progress-indicator"), .5, {
        width: this.time() / this.duration() * $("#" + this.paramaters.customButtons.scrubber).width()
    })
}, Trailer.prototype.onVideoResize = function(t) {
    var e, i, s = window.innerWidth,
        o = window.innerHeight;
    s / .5625 < o ? (e = Math.ceil(.5625 * o), document.getElementById(this.containerID).style.width = e + "px", document.getElementById(this.containerID).style.height = e + "px", document.getElementById(this.containerID).style.left = (s - e) / 2 + "px", document.getElementById(this.containerID).style.top = "0px") : (i = Math.ceil(s / .5625), document.getElementById(this.containerID).style.width = s + "px", document.getElementById(this.containerID).style.height = i + "px", document.getElementById(this.containerID).style.left = "0px", document.getElementById(this.containerID).style.top = (o - i) / 2 + "px")
}, Trailer.prototype.cuePlaylistIndex = function(t, e) {
    this.cuePlaylist(e)
}, Trailer.prototype.show = function() {
    $("body").addClass("noscroll"), "desktop" !== Detectizr.device.type && (document.addEventListener("touchmove", app.onScroll, !1), this.scrollPos = $("body").scrollTop()), TweenMax.set(this.view, {
        display: "block"
    }), TweenMax.fromTo(this.view, .625, {
        left: "100vw"
    }, {
        left: "0vw",
        ease: Power4.easeInOut,
        onComplete: function() {
            "desktop" == Detectizr.device.type && this.play(), TweenMax.set($("#overlay-image"), {
                display: "none",
                delay: .35
            })
        }.bind(this)
    }), $("#trailer_bars .bar").addClass("barOn"), this.unmute(), app.homeView.soundManager.muted ? this.soundPlaying = !1 : (app.homeView.soundManager.muteAll(), this.soundPlaying = !0), app.dispatcher.dispatch("MUTE_MUSIC"), ga("send", "event", "Videos", "play", "Trailer")
}, Trailer.prototype.hide = function() {
    $("body").removeClass("noscroll"), "desktop" !== Detectizr.device.type && (document.removeEventListener("touchmove", app.onScroll, !1), $("body").scrollTop(this.scrollPos)), this.view.hidden = !0, this.stop(), TweenMax.set($("#overlay-image"), {
        display: "block"
    }), TweenMax.fromTo(this.view, .625, {
        left: "0vw"
    }, {
        left: "100vw",
        ease: Power4.easeInOut,
        onComplete: function() {
            this.view.style.display = "none"
        }.bind(this)
    }), this.soundPlaying && app.homeView.soundManager.unMute(), app.dispatcher.dispatch("UNMUTE_MUSIC")
}, AssetManager = function(t, e) {
    this.manifest = t, this.preload = new createjs.LoadQueue((!0)), this.maxConections = 6, this.dispatcher = void 0 !== e ? e : new Dispatcher
}, AssetManager.prototype = {
    constructor: AssetManager,
    init: function() {},
    setMaxConnections: function(t) {
        this.maxConections = t
    },
    getAsset: function(t) {
        return this.preload.getItem(t)
    },
   
    onProgress: function() {
        this.dispatcher.dispatch("AM_PROGRESS_G", 100 * this.preload.progress)
    },
    onComplete: function() {
        this.preload.off("progress", this.progressEvent), this.preload.off("complete", this.completeEvent), this.preload.off("error", this.errorEvent), this.dispatcher.dispatch("AM_COMPLETE_G")
    },
    handleFileError: function(t) {
        this.error = !0, console.log(t.type + "! | " + t.title + " = " + t.data.src), this.dispatcher.dispatch("AM_ERROR_G", t)
    },
    onCompleteSingle: function(t) {
        this.preload.off("complete", this.singleCompleteEvent), this.dispatcher.dispatch("AM_SINGLE_COMPLETE", this.currentId), this.currentId = null
    },
    startLoad: function() {
        this.preload.loadManifest(this.manifest), this.bindEvents(), this.preload.setMaxConnections(this.maxConections)
    },
    loadSingleAsset: function(t, e) {
        return !this.currentId && (this.currentId = t, this.singleCompleteEvent = this.preload.on("complete", this.onCompleteSingle.bind(this)), this.preload.loadFile({
            id: t,
            src: e
        }), !0)
    },
    bindEvents: function() {
        this.progressEvent = this.preload.on("progress", this.onProgress.bind(this)), this.completeEvent = this.preload.on("complete", this.onComplete.bind(this)), this.errorEvent = this.preload.on("error", this.handleFileError.bind(this))
    },
    updateSoundData: function() {
        settings.sounds && settings.sounds.forEach(function(t) {
            var e = this.getAsset(t.id);
            e && (t.src = e.src, console.log(t.src))
        }.bind(this))
    }
}, Video5 = function(t, e) {
    this.video, this.dispatcher = void 0 !== e ? e : new Dispatcher, this.info = void 0 !== t ? t : {}, this.init()
}, Video5.prototype = {
    constructor: Video5,
    init: function() {
        this.video = document.createElement("video"), this.info["class"] && (this.video.className = this.info["class"]), this.info.id && (this.video.id = this.info.id), this.video.preload = !!this.info.preload && this.info.preload, this.video.poster = !!this.info.poster && this.info.poster, this.video.autoplay = !!this.info.autoplay && this.info.autoplay, this.video.loop = !!this.info.loop && this.info.loop, this.video.controls = !this.info.controls || this.info.controls, this.video.canplay = this.onVideoReady.bind(this), this.video.onended = this.onVideoEnded.bind(this), this.video.appendChild(this.addSource(this.info.src, this.info.type ? this.info.type : "video/mp4"))
    },
    duration: function() {
        return this.video.duration
    },
    time: function() {
        return this.video.currentTime
    },
    play: function() {
        this.ready && this.video.play()
    },
    pause: function() {
        this.ready && this.video.pause()
    },
    destroy: function() {
        this.video.pause(), this.video.src = "", this.video.load(), this.video = null
    },
    swapSrc: function(t) {
        this.video.src = t, this.video.load(), this.videoHack()
    },
    onVideoReady: function() {
        this.ready = !0, this.dispatcher.dispatch("VIDEO_READY")
    },
    onVideoEnded: function() {
        this.dispatcher.dispatch("VIDEO_END")
    },
    addSource: function(t, e) {
        var i = document.createElement("source");
        return i.type = e, i.src = t, i
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
