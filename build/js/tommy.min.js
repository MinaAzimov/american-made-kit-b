function Dispatcher() {
    this.events = []
}
Dispatcher.prototype.addEventlistener = function(t, e) {
    this.events[t] = this.events[t] || [], this.events[t] && this.events[t].push(e)
}, Dispatcher.prototype.removeEventlistener = function(t, e) {
    if (this.events[t])
        for (var i = this.events[t], s = i.length - 1; s >= 0; --s)
            if (i[s] === e) return i.splice(s, 1), !0;
    return !1
}, Dispatcher.prototype.dispatch = function(t, e) {
    if (this.events[t])
        for (var i = this.events[t], s = i.length; s--;) i[s](this, e)
}, SoundManager = function(t) {
    this.soundsData = t ? t : [], this.muted = !1, this.dispatcher = new Dispatcher, this.init()
}, SoundManager.prototype = {
    constructor: SoundManager,
    init: function() {
        this.soundsData.forEach(this.addSound.bind(this)), this.bindEvents()
    },
    bindEvents: function() {
        this.dispatcher.addEventlistener("MUTE_MUSIC", this.muteAll.bind(this)), this.dispatcher.addEventlistener("UNMUTE_MUSIC", this.unMute.bind(this))
    },
    addSound: function(t) {
        this[t.id] = new Howl({
            urls: [t.src],
            format: [t.type],
            volume: t.volume,
            loop: t.loop
        })
    },
    play: function(t) {
        this.muted || this[t].play()
    },
    pause: function(t) {
        this[t].pause()
    },
    volume: function(t, e) {
        this[t].volume(e)
    },
    muteAll: function() {
        Howler.mute(), this.muted = !0
    },
    unMute: function() {
        Howler.unmute(), this.muted = !1
    }
}, YTVID = function(t) {
    this.containerID = t.containerID, this.id = t.id, this.height = void 0 !== t.height ? t.height : 720, this.width = void 0 !== t.width ? t.width : 1280, this.dispatcher = void 0 !== t.dispatcher ? t.dispatcher : new Dispatcher, this.playerVars = {
        modestbranding: 1,
        origin: "",
        nologo: 1,
        autoplay: void 0 !== t.autoplay ? t.autoplay : 0,
        controls: void 0 !== t.controls ? t.controls : 1,
        hd: 1,
        autohide: 1,
        showinfo: void 0 !== t.info ? t.info : 1,
        rel: 0,
        frameborder: 0,
        loop: void 0 !== t.loop ? t.loop : 0
    }, this.muteStart = void 0 !== t.mute && t.mute, t.list && (this.playerVars.listType = "playlist", this.playerVars.list = t.id, this.playerVars.index = void 0 !== t.index ? t.index : 0), this.ready = !1
}, YTVID.prototype = {
    constructor: YTVID,
    add: function() {
        this.player = new YT.Player(this.containerID, {
            videoId: this.id,
            width: this.width,
            height: this.height,
            allowFullScreen: !0,
            playerVars: this.playerVars,
            events: {
                onReady: this.onPlayerReady.bind(this),
                onStateChange: this.onPlayerStateChange.bind(this),
                onError: this.onPLayerError.bind(this)
            }
        })
    },
    time: function() {
        return this.player.getCurrentTime()
    },
    duration: function() {
        return this.player.getDuration()
    },
    isPlaying: function() {
        return 1 === this.player.getPlayerState()
    },
    isMuted: function() {
        return this.player.isMuted()
    },
    onPLayerError: function(t) {
        this.dispatcher.dispatch("YT_ERROR", this.id)
    },
    onPlayerReady: function(t) {
        this.ready = !0, this.fullViewport && (this.ytChild = document.getElementById(this.containerID + "-child"), this.setFullViewChildStyles(this.ytChild)), this.dispatcher.dispatch("YT_READY", this.id), this.muteStart && this.player.mute()
    },
    onPlayerStateChange: function(t) {
        this.dispatcher.dispatch("YT_STATE_CHANGE", t.data)
    },
    next: function() {
        switch (this.player.getPlaylistIndex()) {
            case 0:
                console.log(0), this.player.playVideoAt(0);
                break;
            case 1:
                console.log(1), this.player.playVideoAt(1);
                break;
            case 2:
                console.log(2), this.player.playVideoAt(2);
                break;
            case 3:
                console.log(3), this.player.playVideoAt(5);
                break;
            case 4:
                console.log(3), this.player.playVideoAt(5);
                break;
            case 5:
                console.log(4), this.player.playVideoAt(6)
        }
    },
    previous: function() {
        console.log(this.player.getPlaylistIndex()), this.player.getPlaylistIndex() > 4 ? this.playerVars.list && this.player.playVideoAt(2) : this.playerVars.list && this.player.previousVideo()
    },
    play: function() {
        this.ready && this.player.playVideo()
    },
    seek: function(t) {
        this.ready && this.player.seekTo(t)
    },
    restart: function() {
        this.ready && (this.player.seekTo(0), this.player.playVideo())
    },
    pause: function() {
        this.ready && this.player.pauseVideo()
    },
    stop: function() {
        this.ready && this.player.stopVideo()
    },
    mute: function() {
        this.ready && this.player.mute()
    },
    unmute: function() {
        this.ready && this.player.unMute()
    },
    playVideoAt: function(t) {
        this.ready && this.player.playVideoAt(t)
    },
    cuePlaylist: function(t) {
        this.ready && this.player.cuePlaylist({
            list: this.id,
            index: t
        })
    }
};
var tmp = function() {};
tmp.prototype = YTVID.prototype, Trailer = function(t, e) {
    this.paramaters = t, this.containerID = t.containerID, this.updateTime, this.scrollPos = 0, t.width = "100%", t.height = "100%", this.createFullViewPort(), t.containerID = t.containerID + "-child", YTVID.call(this, t, e), this.bindEvents(), this.paramaters.customControls && this.onVideoResize(), this.offset = $("#" + this.paramaters.customButtons.scrubber).offset()
}, Trailer.prototype = new tmp, Trailer.prototype.constructor = Trailer, Trailer.prototype.createFullViewPort = function() {
    this.view = document.getElementById(this.containerID), this.view.style.position = "fixed", this.view.style.left = "100vw", this.view.style.top = "0px", this.view.style.width = "100vw", this.view.style.height = "100vh", this.view.style.overflow = "hidden", this.view.style.display = "none", this.paramaters.customBackground || (this.view.style.backgroundColor = "black"), this.ytChild = document.createElement("div"), this.ytChild.id = this.containerID + "-child", this.paramaters.customControls && (this.ytChild.style.position = "absolute", this.ytChild.style.height = this.ytChild.style.width = "100vw"), this.view.appendChild(this.ytChild)
}, Trailer.prototype.bindEvents = function() {
    document.getElementById(this.paramaters.closeBtn).addEventListener("click", this.onTrailerClose.bind(this)), this.dispatcher.addEventlistener("SHOW_TRAILER", this.show.bind(this)), this.dispatcher.addEventlistener("CUE_PLAYLIST_INDEX", this.cuePlaylistIndex.bind(this)), this.paramaters.customControls && (window.addEventListener("resize", this.onVideoResize.bind(this)), document.getElementById(this.paramaters.customButtons.playBtn).addEventListener("click", this.onPlayToggle.bind(this)), document.getElementById(this.paramaters.customButtons.prevBtn).addEventListener("click", this.onPrevPlaylist.bind(this)), document.getElementById(this.paramaters.customButtons.nextBtn).addEventListener("click", this.onNextPlaylist.bind(this)), document.getElementById(this.paramaters.customButtons.soundBtn).addEventListener("click", this.onSoundToggle.bind(this)), document.getElementById(this.paramaters.customButtons.scrubber).addEventListener("click", this.onScrub.bind(this))), this.dispatcher.addEventlistener("PLAY_TRAILER", this.play.bind(this)), this.dispatcher.addEventlistener("PAUSE_TRAILER", this.pause.bind(this)), $("#yt-close").mouseenter(function() {
        TweenMax.set($(this).find(".close-outer"), {
            transformOrigin: "50% 50%"
        }), TweenMax.set($(this).find(".close-inner"), {
            transformOrigin: "50% 50%"
        }), TweenMax.set($(this).find(".close-img"), {
            transformOrigin: "50% 50%"
        }), TweenMax.to($(this).find(".close-outer"), .25, {
            scale: 1.2,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".close-inner"), .25, {
            scale: 1.15,
            border: "1px solid rgba(255, 254, 237, 0.75)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".close-img"), .4, {
            rotation: 90,
            ease: Power3.easeOut
        })
    }).mouseleave(function() {
        TweenMax.to($(this).find(".close-outer"), .25, {
            scale: 1,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".close-inner"), .25, {
            scale: 1,
            border: "1px solid rgba(255, 254, 237, 0.2)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".close-img"), .4, {
            rotation: 0,
            ease: Power3.easeOut
        })
    }), $(".yt-btn").mouseenter(function() {
        TweenMax.to($(this).find(".yt-inner"), .4, {
            border: "1px solid rgba(255, 254, 237, 0.75)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-content"), .4, {
            opacity: 1,
            ease: Power3.easeOut
        })
    }).mouseleave(function() {
        TweenMax.to($(this).find(".yt-inner"), .4, {
            border: "1px solid rgba(255, 254, 237, 0.2)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-content"), .4, {
            opacity: .6,
            ease: Power3.easeOut
        })
    }), $("#yt-previous").mouseenter(function() {
        TweenMax.to($(this).find(".yt-playlist_over"), .4, {
            clip: "rect(0px, 124px, 34px, 0px)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text p"), .4, {
            x: 3,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text img"), .4, {
            x: -3,
            opacity: 1,
            ease: Power3.easeOut
        })
    }).mouseleave(function() {
        TweenMax.to($(this).find(".yt-playlist_over"), .4, {
            clip: "rect(0px, 124px, 34px, 124px)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text p"), .4, {
            x: -6,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text img"), .4, {
            x: 6,
            opacity: 0,
            ease: Power3.easeOut
        })
    }), $("#yt-next").mouseenter(function() {
        TweenMax.to($(this).find(".yt-playlist_over"), .4, {
            clip: "rect(0px, 124px, 34px, 0px)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text p"), .4, {
            x: -3,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text img"), .4, {
            x: 9,
            opacity: 1,
            ease: Power3.easeOut
        })
    }).mouseleave(function() {
        TweenMax.to($(this).find(".yt-playlist_over"), .4, {
            clip: "rect(0px, 0px, 34px, 0px)",
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text p"), .4, {
            x: 6,
            ease: Power3.easeOut
        }), TweenMax.to($(this).find(".yt-playlist_text img"), .4, {
            x: 0,
            opacity: 0,
            ease: Power3.easeOut
        })
    })
}, Trailer.prototype.onTrailerClose = function(t) {
    this.hide()
}, Trailer.prototype.onPlayToggle = function(t) {
    this.isPlaying() === !0 ? (this.pause(), $("#yt-playtoggle .yt-inner img").attr("src", "img/trailer-play.png"), $(".play-button").addClass("paused")) : this.isPlaying() === !1 && (this.play(), $("#yt-playtoggle .yt-inner img").attr("src", "img/trailer-pause.png"), $(".play-button").removeClass("paused"))
}, Trailer.prototype.onSoundToggle = function(t) {
    this.isMuted() === !0 ? (this.unmute(), $("#trailer_bars .bar").addClass("barOn")) : this.isMuted() === !1 && (this.mute(), $("#trailer_bars .bar").removeClass("barOn"))
}, Trailer.prototype.onPrevPlaylist = function(t) {
    this.previous()
}, Trailer.prototype.onNextPlaylist = function(t) {
    this.next()
}, Trailer.prototype.onScrub = function(t) {
    this.seek(Math.floor((t.pageX - (this.offset.left - window.innerWidth)) / $("#" + this.paramaters.customButtons.scrubber).width() * this.duration())), $("#yt-progress-indicator").css("width", (t.pageX - (this.offset.left - window.innerWidth)) / $("#" + this.paramaters.customButtons.scrubber).width() * 100 + "%")
}, Trailer.prototype.onPlayerStateChange = function(t) {
    1 === t.data ? (this.updateTime = setInterval(this.displayTime.bind(this), 500), $(".play-button").removeClass("paused")) : (clearInterval(this.updateTime), $(".play-button").addClass("paused"))
}, Trailer.prototype.displayTime = function(t) {
    TweenMax.to($("#yt-progress-indicator"), .5, {
        width: this.time() / this.duration() * $("#" + this.paramaters.customButtons.scrubber).width()
    })
}, Trailer.prototype.onVideoResize = function(t) {
    var e, i, s = window.innerWidth,
        o = window.innerHeight;
    s / .5625 < o ? (e = Math.ceil(.5625 * o), document.getElementById(this.containerID).style.width = e + "px", document.getElementById(this.containerID).style.height = e + "px", document.getElementById(this.containerID).style.left = (s - e) / 2 + "px", document.getElementById(this.containerID).style.top = "0px") : (i = Math.ceil(s / .5625), document.getElementById(this.containerID).style.width = s + "px", document.getElementById(this.containerID).style.height = i + "px", document.getElementById(this.containerID).style.left = "0px", document.getElementById(this.containerID).style.top = (o - i) / 2 + "px")
}, Trailer.prototype.cuePlaylistIndex = function(t, e) {
    this.cuePlaylist(e)
}, Trailer.prototype.show = function() {
    $("body").addClass("noscroll"), "desktop" !== Detectizr.device.type && (document.addEventListener("touchmove", app.onScroll, !1), this.scrollPos = $("body").scrollTop()), TweenMax.set(this.view, {
        display: "block"
    }), TweenMax.fromTo(this.view, .625, {
        left: "100vw"
    }, {
        left: "0vw",
        ease: Power4.easeInOut,
        onComplete: function() {
            "desktop" == Detectizr.device.type && this.play(), TweenMax.set($("#overlay-image"), {
                display: "none",
                delay: .35
            })
        }.bind(this)
    }), $("#trailer_bars .bar").addClass("barOn"), this.unmute(), app.homeView.soundManager.muted ? this.soundPlaying = !1 : (app.homeView.soundManager.muteAll(), this.soundPlaying = !0), app.dispatcher.dispatch("MUTE_MUSIC"), ga("send", "event", "Videos", "play", "Trailer")
}, Trailer.prototype.hide = function() {
    $("body").removeClass("noscroll"), "desktop" !== Detectizr.device.type && (document.removeEventListener("touchmove", app.onScroll, !1), $("body").scrollTop(this.scrollPos)), this.view.hidden = !0, this.stop(), TweenMax.set($("#overlay-image"), {
        display: "block"
    }), TweenMax.fromTo(this.view, .625, {
        left: "0vw"
    }, {
        left: "100vw",
        ease: Power4.easeInOut,
        onComplete: function() {
            this.view.style.display = "none"
        }.bind(this)
    }), this.soundPlaying && app.homeView.soundManager.unMute(), app.dispatcher.dispatch("UNMUTE_MUSIC")
}, AssetManager = function(t, e) {
    this.manifest = t, this.preload = new createjs.LoadQueue((!0)), this.maxConections = 6, this.dispatcher = void 0 !== e ? e : new Dispatcher
}, AssetManager.prototype = {
    constructor: AssetManager,
    init: function() {},
    setMaxConnections: function(t) {
        this.maxConections = t
    },
    getAsset: function(t) {
        return this.preload.getItem(t)
    },
   
    onProgress: function() {
        this.dispatcher.dispatch("AM_PROGRESS_G", 100 * this.preload.progress)
    },
    onComplete: function() {
        this.preload.off("progress", this.progressEvent), this.preload.off("complete", this.completeEvent), this.preload.off("error", this.errorEvent), this.dispatcher.dispatch("AM_COMPLETE_G")
    },
    handleFileError: function(t) {
        this.error = !0, console.log(t.type + "! | " + t.title + " = " + t.data.src), this.dispatcher.dispatch("AM_ERROR_G", t)
    },
    onCompleteSingle: function(t) {
        this.preload.off("complete", this.singleCompleteEvent), this.dispatcher.dispatch("AM_SINGLE_COMPLETE", this.currentId), this.currentId = null
    },
    startLoad: function() {
        this.preload.loadManifest(this.manifest), this.bindEvents(), this.preload.setMaxConnections(this.maxConections)
    },
    loadSingleAsset: function(t, e) {
        return !this.currentId && (this.currentId = t, this.singleCompleteEvent = this.preload.on("complete", this.onCompleteSingle.bind(this)), this.preload.loadFile({
            id: t,
            src: e
        }), !0)
    },
    bindEvents: function() {
        this.progressEvent = this.preload.on("progress", this.onProgress.bind(this)), this.completeEvent = this.preload.on("complete", this.onComplete.bind(this)), this.errorEvent = this.preload.on("error", this.handleFileError.bind(this))
    },
    updateSoundData: function() {
        settings.sounds && settings.sounds.forEach(function(t) {
            var e = this.getAsset(t.id);
            e && (t.src = e.src, console.log(t.src))
        }.bind(this))
    }
}, Video5 = function(t, e) {
    this.video, this.dispatcher = void 0 !== e ? e : new Dispatcher, this.info = void 0 !== t ? t : {}, this.init()
}, Video5.prototype = {
    constructor: Video5,
    init: function() {
        this.video = document.createElement("video"), this.info["class"] && (this.video.className = this.info["class"]), this.info.id && (this.video.id = this.info.id), this.video.preload = !!this.info.preload && this.info.preload, this.video.poster = !!this.info.poster && this.info.poster, this.video.autoplay = !!this.info.autoplay && this.info.autoplay, this.video.loop = !!this.info.loop && this.info.loop, this.video.controls = !this.info.controls || this.info.controls, this.video.canplay = this.onVideoReady.bind(this), this.video.onended = this.onVideoEnded.bind(this), this.video.appendChild(this.addSource(this.info.src, this.info.type ? this.info.type : "video/mp4"))
    },
    duration: function() {
        return this.video.duration
    },
    time: function() {
        return this.video.currentTime
    },
    play: function() {
        this.ready && this.video.play()
    },
    pause: function() {
        this.ready && this.video.pause()
    },
    destroy: function() {
        this.video.pause(), this.video.src = "", this.video.load(), this.video = null
    },
    swapSrc: function(t) {
        this.video.src = t, this.video.load(), this.videoHack()
    },
    onVideoReady: function() {
        this.ready = !0, this.dispatcher.dispatch("VIDEO_READY")
    },
    onVideoEnded: function() {
        this.dispatcher.dispatch("VIDEO_END")
    },
    addSource: function(t, e) {
        var i = document.createElement("source");
        return i.type = e, i.src = t, i
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJ0b21teS5taW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gRGlzcGF0Y2hlcigpIHtcbiAgICB0aGlzLmV2ZW50cyA9IFtdXG59XG5EaXNwYXRjaGVyLnByb3RvdHlwZS5hZGRFdmVudGxpc3RlbmVyID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMuZXZlbnRzW3RdID0gdGhpcy5ldmVudHNbdF0gfHwgW10sIHRoaXMuZXZlbnRzW3RdICYmIHRoaXMuZXZlbnRzW3RdLnB1c2goZSlcbn0sIERpc3BhdGNoZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50bGlzdGVuZXIgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgaWYgKHRoaXMuZXZlbnRzW3RdKVxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5ldmVudHNbdF0sIHMgPSBpLmxlbmd0aCAtIDE7IHMgPj0gMDsgLS1zKVxuICAgICAgICAgICAgaWYgKGlbc10gPT09IGUpIHJldHVybiBpLnNwbGljZShzLCAxKSwgITA7XG4gICAgcmV0dXJuICExXG59LCBEaXNwYXRjaGVyLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICBpZiAodGhpcy5ldmVudHNbdF0pXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmV2ZW50c1t0XSwgcyA9IGkubGVuZ3RoOyBzLS07KSBpW3NdKHRoaXMsIGUpXG59LCBTb3VuZE1hbmFnZXIgPSBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zb3VuZHNEYXRhID0gdCA/IHQgOiBbXSwgdGhpcy5tdXRlZCA9ICExLCB0aGlzLmRpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlciwgdGhpcy5pbml0KClcbn0sIFNvdW5kTWFuYWdlci5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IFNvdW5kTWFuYWdlcixcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zb3VuZHNEYXRhLmZvckVhY2godGhpcy5hZGRTb3VuZC5iaW5kKHRoaXMpKSwgdGhpcy5iaW5kRXZlbnRzKClcbiAgICB9LFxuICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuYWRkRXZlbnRsaXN0ZW5lcihcIk1VVEVfTVVTSUNcIiwgdGhpcy5tdXRlQWxsLmJpbmQodGhpcykpLCB0aGlzLmRpc3BhdGNoZXIuYWRkRXZlbnRsaXN0ZW5lcihcIlVOTVVURV9NVVNJQ1wiLCB0aGlzLnVuTXV0ZS5iaW5kKHRoaXMpKVxuICAgIH0sXG4gICAgYWRkU291bmQ6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpc1t0LmlkXSA9IG5ldyBIb3dsKHtcbiAgICAgICAgICAgIHVybHM6IFt0LnNyY10sXG4gICAgICAgICAgICBmb3JtYXQ6IFt0LnR5cGVdLFxuICAgICAgICAgICAgdm9sdW1lOiB0LnZvbHVtZSxcbiAgICAgICAgICAgIGxvb3A6IHQubG9vcFxuICAgICAgICB9KVxuICAgIH0sXG4gICAgcGxheTogZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLm11dGVkIHx8IHRoaXNbdF0ucGxheSgpXG4gICAgfSxcbiAgICBwYXVzZTogZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzW3RdLnBhdXNlKClcbiAgICB9LFxuICAgIHZvbHVtZTogZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0aGlzW3RdLnZvbHVtZShlKVxuICAgIH0sXG4gICAgbXV0ZUFsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIEhvd2xlci5tdXRlKCksIHRoaXMubXV0ZWQgPSAhMFxuICAgIH0sXG4gICAgdW5NdXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgSG93bGVyLnVubXV0ZSgpLCB0aGlzLm11dGVkID0gITFcbiAgICB9XG59LCBZVFZJRCA9IGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLmNvbnRhaW5lcklEID0gdC5jb250YWluZXJJRCwgdGhpcy5pZCA9IHQuaWQsIHRoaXMuaGVpZ2h0ID0gdm9pZCAwICE9PSB0LmhlaWdodCA/IHQuaGVpZ2h0IDogNzIwLCB0aGlzLndpZHRoID0gdm9pZCAwICE9PSB0LndpZHRoID8gdC53aWR0aCA6IDEyODAsIHRoaXMuZGlzcGF0Y2hlciA9IHZvaWQgMCAhPT0gdC5kaXNwYXRjaGVyID8gdC5kaXNwYXRjaGVyIDogbmV3IERpc3BhdGNoZXIsIHRoaXMucGxheWVyVmFycyA9IHtcbiAgICAgICAgbW9kZXN0YnJhbmRpbmc6IDEsXG4gICAgICAgIG9yaWdpbjogXCJcIixcbiAgICAgICAgbm9sb2dvOiAxLFxuICAgICAgICBhdXRvcGxheTogdm9pZCAwICE9PSB0LmF1dG9wbGF5ID8gdC5hdXRvcGxheSA6IDAsXG4gICAgICAgIGNvbnRyb2xzOiB2b2lkIDAgIT09IHQuY29udHJvbHMgPyB0LmNvbnRyb2xzIDogMSxcbiAgICAgICAgaGQ6IDEsXG4gICAgICAgIGF1dG9oaWRlOiAxLFxuICAgICAgICBzaG93aW5mbzogdm9pZCAwICE9PSB0LmluZm8gPyB0LmluZm8gOiAxLFxuICAgICAgICByZWw6IDAsXG4gICAgICAgIGZyYW1lYm9yZGVyOiAwLFxuICAgICAgICBsb29wOiB2b2lkIDAgIT09IHQubG9vcCA/IHQubG9vcCA6IDBcbiAgICB9LCB0aGlzLm11dGVTdGFydCA9IHZvaWQgMCAhPT0gdC5tdXRlICYmIHQubXV0ZSwgdC5saXN0ICYmICh0aGlzLnBsYXllclZhcnMubGlzdFR5cGUgPSBcInBsYXlsaXN0XCIsIHRoaXMucGxheWVyVmFycy5saXN0ID0gdC5pZCwgdGhpcy5wbGF5ZXJWYXJzLmluZGV4ID0gdm9pZCAwICE9PSB0LmluZGV4ID8gdC5pbmRleCA6IDApLCB0aGlzLnJlYWR5ID0gITFcbn0sIFlUVklELnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogWVRWSUQsXG4gICAgYWRkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBuZXcgWVQuUGxheWVyKHRoaXMuY29udGFpbmVySUQsIHtcbiAgICAgICAgICAgIHZpZGVvSWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5oZWlnaHQsXG4gICAgICAgICAgICBhbGxvd0Z1bGxTY3JlZW46ICEwLFxuICAgICAgICAgICAgcGxheWVyVmFyczogdGhpcy5wbGF5ZXJWYXJzLFxuICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgb25SZWFkeTogdGhpcy5vblBsYXllclJlYWR5LmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgb25TdGF0ZUNoYW5nZTogdGhpcy5vblBsYXllclN0YXRlQ2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgb25FcnJvcjogdGhpcy5vblBMYXllckVycm9yLmJpbmQodGhpcylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0Q3VycmVudFRpbWUoKVxuICAgIH0sXG4gICAgZHVyYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuZ2V0RHVyYXRpb24oKVxuICAgIH0sXG4gICAgaXNQbGF5aW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIDEgPT09IHRoaXMucGxheWVyLmdldFBsYXllclN0YXRlKClcbiAgICB9LFxuICAgIGlzTXV0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbGF5ZXIuaXNNdXRlZCgpXG4gICAgfSxcbiAgICBvblBMYXllckVycm9yOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5kaXNwYXRjaChcIllUX0VSUk9SXCIsIHRoaXMuaWQpXG4gICAgfSxcbiAgICBvblBsYXllclJlYWR5OiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMucmVhZHkgPSAhMCwgdGhpcy5mdWxsVmlld3BvcnQgJiYgKHRoaXMueXRDaGlsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuY29udGFpbmVySUQgKyBcIi1jaGlsZFwiKSwgdGhpcy5zZXRGdWxsVmlld0NoaWxkU3R5bGVzKHRoaXMueXRDaGlsZCkpLCB0aGlzLmRpc3BhdGNoZXIuZGlzcGF0Y2goXCJZVF9SRUFEWVwiLCB0aGlzLmlkKSwgdGhpcy5tdXRlU3RhcnQgJiYgdGhpcy5wbGF5ZXIubXV0ZSgpXG4gICAgfSxcbiAgICBvblBsYXllclN0YXRlQ2hhbmdlOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5kaXNwYXRjaChcIllUX1NUQVRFX0NIQU5HRVwiLCB0LmRhdGEpXG4gICAgfSxcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnBsYXllci5nZXRQbGF5bGlzdEluZGV4KCkpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygwKSwgdGhpcy5wbGF5ZXIucGxheVZpZGVvQXQoMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coMSksIHRoaXMucGxheWVyLnBsYXlWaWRlb0F0KDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDIpLCB0aGlzLnBsYXllci5wbGF5VmlkZW9BdCgyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygzKSwgdGhpcy5wbGF5ZXIucGxheVZpZGVvQXQoNSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coMyksIHRoaXMucGxheWVyLnBsYXlWaWRlb0F0KDUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKDQpLCB0aGlzLnBsYXllci5wbGF5VmlkZW9BdCg2KVxuICAgICAgICB9XG4gICAgfSxcbiAgICBwcmV2aW91czogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMucGxheWVyLmdldFBsYXlsaXN0SW5kZXgoKSksIHRoaXMucGxheWVyLmdldFBsYXlsaXN0SW5kZXgoKSA+IDQgPyB0aGlzLnBsYXllclZhcnMubGlzdCAmJiB0aGlzLnBsYXllci5wbGF5VmlkZW9BdCgyKSA6IHRoaXMucGxheWVyVmFycy5saXN0ICYmIHRoaXMucGxheWVyLnByZXZpb3VzVmlkZW8oKVxuICAgIH0sXG4gICAgcGxheTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVhZHkgJiYgdGhpcy5wbGF5ZXIucGxheVZpZGVvKClcbiAgICB9LFxuICAgIHNlZWs6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5yZWFkeSAmJiB0aGlzLnBsYXllci5zZWVrVG8odClcbiAgICB9LFxuICAgIHJlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlYWR5ICYmICh0aGlzLnBsYXllci5zZWVrVG8oMCksIHRoaXMucGxheWVyLnBsYXlWaWRlbygpKVxuICAgIH0sXG4gICAgcGF1c2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlYWR5ICYmIHRoaXMucGxheWVyLnBhdXNlVmlkZW8oKVxuICAgIH0sXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVhZHkgJiYgdGhpcy5wbGF5ZXIuc3RvcFZpZGVvKClcbiAgICB9LFxuICAgIG11dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlYWR5ICYmIHRoaXMucGxheWVyLm11dGUoKVxuICAgIH0sXG4gICAgdW5tdXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWFkeSAmJiB0aGlzLnBsYXllci51bk11dGUoKVxuICAgIH0sXG4gICAgcGxheVZpZGVvQXQ6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5yZWFkeSAmJiB0aGlzLnBsYXllci5wbGF5VmlkZW9BdCh0KVxuICAgIH0sXG4gICAgY3VlUGxheWxpc3Q6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5yZWFkeSAmJiB0aGlzLnBsYXllci5jdWVQbGF5bGlzdCh7XG4gICAgICAgICAgICBsaXN0OiB0aGlzLmlkLFxuICAgICAgICAgICAgaW5kZXg6IHRcbiAgICAgICAgfSlcbiAgICB9XG59O1xudmFyIHRtcCA9IGZ1bmN0aW9uKCkge307XG50bXAucHJvdG90eXBlID0gWVRWSUQucHJvdG90eXBlLCBUcmFpbGVyID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMucGFyYW1hdGVycyA9IHQsIHRoaXMuY29udGFpbmVySUQgPSB0LmNvbnRhaW5lcklELCB0aGlzLnVwZGF0ZVRpbWUsIHRoaXMuc2Nyb2xsUG9zID0gMCwgdC53aWR0aCA9IFwiMTAwJVwiLCB0LmhlaWdodCA9IFwiMTAwJVwiLCB0aGlzLmNyZWF0ZUZ1bGxWaWV3UG9ydCgpLCB0LmNvbnRhaW5lcklEID0gdC5jb250YWluZXJJRCArIFwiLWNoaWxkXCIsIFlUVklELmNhbGwodGhpcywgdCwgZSksIHRoaXMuYmluZEV2ZW50cygpLCB0aGlzLnBhcmFtYXRlcnMuY3VzdG9tQ29udHJvbHMgJiYgdGhpcy5vblZpZGVvUmVzaXplKCksIHRoaXMub2Zmc2V0ID0gJChcIiNcIiArIHRoaXMucGFyYW1hdGVycy5jdXN0b21CdXR0b25zLnNjcnViYmVyKS5vZmZzZXQoKVxufSwgVHJhaWxlci5wcm90b3R5cGUgPSBuZXcgdG1wLCBUcmFpbGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRyYWlsZXIsIFRyYWlsZXIucHJvdG90eXBlLmNyZWF0ZUZ1bGxWaWV3UG9ydCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuY29udGFpbmVySUQpLCB0aGlzLnZpZXcuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCIsIHRoaXMudmlldy5zdHlsZS5sZWZ0ID0gXCIxMDB2d1wiLCB0aGlzLnZpZXcuc3R5bGUudG9wID0gXCIwcHhcIiwgdGhpcy52aWV3LnN0eWxlLndpZHRoID0gXCIxMDB2d1wiLCB0aGlzLnZpZXcuc3R5bGUuaGVpZ2h0ID0gXCIxMDB2aFwiLCB0aGlzLnZpZXcuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiLCB0aGlzLnZpZXcuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiLCB0aGlzLnBhcmFtYXRlcnMuY3VzdG9tQmFja2dyb3VuZCB8fCAodGhpcy52aWV3LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiYmxhY2tcIiksIHRoaXMueXRDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIHRoaXMueXRDaGlsZC5pZCA9IHRoaXMuY29udGFpbmVySUQgKyBcIi1jaGlsZFwiLCB0aGlzLnBhcmFtYXRlcnMuY3VzdG9tQ29udHJvbHMgJiYgKHRoaXMueXRDaGlsZC5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIiwgdGhpcy55dENoaWxkLnN0eWxlLmhlaWdodCA9IHRoaXMueXRDaGlsZC5zdHlsZS53aWR0aCA9IFwiMTAwdndcIiksIHRoaXMudmlldy5hcHBlbmRDaGlsZCh0aGlzLnl0Q2hpbGQpXG59LCBUcmFpbGVyLnByb3RvdHlwZS5iaW5kRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5wYXJhbWF0ZXJzLmNsb3NlQnRuKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vblRyYWlsZXJDbG9zZS5iaW5kKHRoaXMpKSwgdGhpcy5kaXNwYXRjaGVyLmFkZEV2ZW50bGlzdGVuZXIoXCJTSE9XX1RSQUlMRVJcIiwgdGhpcy5zaG93LmJpbmQodGhpcykpLCB0aGlzLmRpc3BhdGNoZXIuYWRkRXZlbnRsaXN0ZW5lcihcIkNVRV9QTEFZTElTVF9JTkRFWFwiLCB0aGlzLmN1ZVBsYXlsaXN0SW5kZXguYmluZCh0aGlzKSksIHRoaXMucGFyYW1hdGVycy5jdXN0b21Db250cm9scyAmJiAod2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5vblZpZGVvUmVzaXplLmJpbmQodGhpcykpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnBhcmFtYXRlcnMuY3VzdG9tQnV0dG9ucy5wbGF5QnRuKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vblBsYXlUb2dnbGUuYmluZCh0aGlzKSksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMucGFyYW1hdGVycy5jdXN0b21CdXR0b25zLnByZXZCdG4pLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uUHJldlBsYXlsaXN0LmJpbmQodGhpcykpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnBhcmFtYXRlcnMuY3VzdG9tQnV0dG9ucy5uZXh0QnRuKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbk5leHRQbGF5bGlzdC5iaW5kKHRoaXMpKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5wYXJhbWF0ZXJzLmN1c3RvbUJ1dHRvbnMuc291bmRCdG4pLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uU291bmRUb2dnbGUuYmluZCh0aGlzKSksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMucGFyYW1hdGVycy5jdXN0b21CdXR0b25zLnNjcnViYmVyKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vblNjcnViLmJpbmQodGhpcykpKSwgdGhpcy5kaXNwYXRjaGVyLmFkZEV2ZW50bGlzdGVuZXIoXCJQTEFZX1RSQUlMRVJcIiwgdGhpcy5wbGF5LmJpbmQodGhpcykpLCB0aGlzLmRpc3BhdGNoZXIuYWRkRXZlbnRsaXN0ZW5lcihcIlBBVVNFX1RSQUlMRVJcIiwgdGhpcy5wYXVzZS5iaW5kKHRoaXMpKSwgJChcIiN5dC1jbG9zZVwiKS5tb3VzZWVudGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBUd2Vlbk1heC5zZXQoJCh0aGlzKS5maW5kKFwiLmNsb3NlLW91dGVyXCIpLCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IFwiNTAlIDUwJVwiXG4gICAgICAgIH0pLCBUd2Vlbk1heC5zZXQoJCh0aGlzKS5maW5kKFwiLmNsb3NlLWlubmVyXCIpLCB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IFwiNTAlIDUwJVwiXG4gICAgICAgIH0pLCBUd2Vlbk1heC5zZXQoJCh0aGlzKS5maW5kKFwiLmNsb3NlLWltZ1wiKSwge1xuICAgICAgICAgICAgdHJhbnNmb3JtT3JpZ2luOiBcIjUwJSA1MCVcIlxuICAgICAgICB9KSwgVHdlZW5NYXgudG8oJCh0aGlzKS5maW5kKFwiLmNsb3NlLW91dGVyXCIpLCAuMjUsIHtcbiAgICAgICAgICAgIHNjYWxlOiAxLjIsXG4gICAgICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dFxuICAgICAgICB9KSwgVHdlZW5NYXgudG8oJCh0aGlzKS5maW5kKFwiLmNsb3NlLWlubmVyXCIpLCAuMjUsIHtcbiAgICAgICAgICAgIHNjYWxlOiAxLjE1LFxuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwgMjU0LCAyMzcsIDAuNzUpXCIsXG4gICAgICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dFxuICAgICAgICB9KSwgVHdlZW5NYXgudG8oJCh0aGlzKS5maW5kKFwiLmNsb3NlLWltZ1wiKSwgLjQsIHtcbiAgICAgICAgICAgIHJvdGF0aW9uOiA5MCxcbiAgICAgICAgICAgIGVhc2U6IFBvd2VyMy5lYXNlT3V0XG4gICAgICAgIH0pXG4gICAgfSkubW91c2VsZWF2ZShmdW5jdGlvbigpIHtcbiAgICAgICAgVHdlZW5NYXgudG8oJCh0aGlzKS5maW5kKFwiLmNsb3NlLW91dGVyXCIpLCAuMjUsIHtcbiAgICAgICAgICAgIHNjYWxlOiAxLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSksIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZChcIi5jbG9zZS1pbm5lclwiKSwgLjI1LCB7XG4gICAgICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgcmdiYSgyNTUsIDI1NCwgMjM3LCAwLjIpXCIsXG4gICAgICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dFxuICAgICAgICB9KSwgVHdlZW5NYXgudG8oJCh0aGlzKS5maW5kKFwiLmNsb3NlLWltZ1wiKSwgLjQsIHtcbiAgICAgICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSlcbiAgICB9KSwgJChcIi55dC1idG5cIikubW91c2VlbnRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgVHdlZW5NYXgudG8oJCh0aGlzKS5maW5kKFwiLnl0LWlubmVyXCIpLCAuNCwge1xuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCByZ2JhKDI1NSwgMjU0LCAyMzcsIDAuNzUpXCIsXG4gICAgICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dFxuICAgICAgICB9KSwgVHdlZW5NYXgudG8oJCh0aGlzKS5maW5kKFwiLnl0LWNvbnRlbnRcIiksIC40LCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSlcbiAgICB9KS5tb3VzZWxlYXZlKGZ1bmN0aW9uKCkge1xuICAgICAgICBUd2Vlbk1heC50bygkKHRoaXMpLmZpbmQoXCIueXQtaW5uZXJcIiksIC40LCB7XG4gICAgICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTQsIDIzNywgMC4yKVwiLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSksIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZChcIi55dC1jb250ZW50XCIpLCAuNCwge1xuICAgICAgICAgICAgb3BhY2l0eTogLjYsXG4gICAgICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dFxuICAgICAgICB9KVxuICAgIH0pLCAkKFwiI3l0LXByZXZpb3VzXCIpLm1vdXNlZW50ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZChcIi55dC1wbGF5bGlzdF9vdmVyXCIpLCAuNCwge1xuICAgICAgICAgICAgY2xpcDogXCJyZWN0KDBweCwgMTI0cHgsIDM0cHgsIDBweClcIixcbiAgICAgICAgICAgIGVhc2U6IFBvd2VyMy5lYXNlT3V0XG4gICAgICAgIH0pLCBUd2Vlbk1heC50bygkKHRoaXMpLmZpbmQoXCIueXQtcGxheWxpc3RfdGV4dCBwXCIpLCAuNCwge1xuICAgICAgICAgICAgeDogMyxcbiAgICAgICAgICAgIGVhc2U6IFBvd2VyMy5lYXNlT3V0XG4gICAgICAgIH0pLCBUd2Vlbk1heC50bygkKHRoaXMpLmZpbmQoXCIueXQtcGxheWxpc3RfdGV4dCBpbWdcIiksIC40LCB7XG4gICAgICAgICAgICB4OiAtMyxcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dFxuICAgICAgICB9KVxuICAgIH0pLm1vdXNlbGVhdmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZChcIi55dC1wbGF5bGlzdF9vdmVyXCIpLCAuNCwge1xuICAgICAgICAgICAgY2xpcDogXCJyZWN0KDBweCwgMTI0cHgsIDM0cHgsIDEyNHB4KVwiLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSksIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZChcIi55dC1wbGF5bGlzdF90ZXh0IHBcIiksIC40LCB7XG4gICAgICAgICAgICB4OiAtNixcbiAgICAgICAgICAgIGVhc2U6IFBvd2VyMy5lYXNlT3V0XG4gICAgICAgIH0pLCBUd2Vlbk1heC50bygkKHRoaXMpLmZpbmQoXCIueXQtcGxheWxpc3RfdGV4dCBpbWdcIiksIC40LCB7XG4gICAgICAgICAgICB4OiA2LFxuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIGVhc2U6IFBvd2VyMy5lYXNlT3V0XG4gICAgICAgIH0pXG4gICAgfSksICQoXCIjeXQtbmV4dFwiKS5tb3VzZWVudGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBUd2Vlbk1heC50bygkKHRoaXMpLmZpbmQoXCIueXQtcGxheWxpc3Rfb3ZlclwiKSwgLjQsIHtcbiAgICAgICAgICAgIGNsaXA6IFwicmVjdCgwcHgsIDEyNHB4LCAzNHB4LCAwcHgpXCIsXG4gICAgICAgICAgICBlYXNlOiBQb3dlcjMuZWFzZU91dFxuICAgICAgICB9KSwgVHdlZW5NYXgudG8oJCh0aGlzKS5maW5kKFwiLnl0LXBsYXlsaXN0X3RleHQgcFwiKSwgLjQsIHtcbiAgICAgICAgICAgIHg6IC0zLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSksIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZChcIi55dC1wbGF5bGlzdF90ZXh0IGltZ1wiKSwgLjQsIHtcbiAgICAgICAgICAgIHg6IDksXG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSlcbiAgICB9KS5tb3VzZWxlYXZlKGZ1bmN0aW9uKCkge1xuICAgICAgICBUd2Vlbk1heC50bygkKHRoaXMpLmZpbmQoXCIueXQtcGxheWxpc3Rfb3ZlclwiKSwgLjQsIHtcbiAgICAgICAgICAgIGNsaXA6IFwicmVjdCgwcHgsIDBweCwgMzRweCwgMHB4KVwiLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSksIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZChcIi55dC1wbGF5bGlzdF90ZXh0IHBcIiksIC40LCB7XG4gICAgICAgICAgICB4OiA2LFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSksIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZChcIi55dC1wbGF5bGlzdF90ZXh0IGltZ1wiKSwgLjQsIHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgZWFzZTogUG93ZXIzLmVhc2VPdXRcbiAgICAgICAgfSlcbiAgICB9KVxufSwgVHJhaWxlci5wcm90b3R5cGUub25UcmFpbGVyQ2xvc2UgPSBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5oaWRlKClcbn0sIFRyYWlsZXIucHJvdG90eXBlLm9uUGxheVRvZ2dsZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLmlzUGxheWluZygpID09PSAhMCA/ICh0aGlzLnBhdXNlKCksICQoXCIjeXQtcGxheXRvZ2dsZSAueXQtaW5uZXIgaW1nXCIpLmF0dHIoXCJzcmNcIiwgXCJpbWcvdHJhaWxlci1wbGF5LnBuZ1wiKSwgJChcIi5wbGF5LWJ1dHRvblwiKS5hZGRDbGFzcyhcInBhdXNlZFwiKSkgOiB0aGlzLmlzUGxheWluZygpID09PSAhMSAmJiAodGhpcy5wbGF5KCksICQoXCIjeXQtcGxheXRvZ2dsZSAueXQtaW5uZXIgaW1nXCIpLmF0dHIoXCJzcmNcIiwgXCJpbWcvdHJhaWxlci1wYXVzZS5wbmdcIiksICQoXCIucGxheS1idXR0b25cIikucmVtb3ZlQ2xhc3MoXCJwYXVzZWRcIikpXG59LCBUcmFpbGVyLnByb3RvdHlwZS5vblNvdW5kVG9nZ2xlID0gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuaXNNdXRlZCgpID09PSAhMCA/ICh0aGlzLnVubXV0ZSgpLCAkKFwiI3RyYWlsZXJfYmFycyAuYmFyXCIpLmFkZENsYXNzKFwiYmFyT25cIikpIDogdGhpcy5pc011dGVkKCkgPT09ICExICYmICh0aGlzLm11dGUoKSwgJChcIiN0cmFpbGVyX2JhcnMgLmJhclwiKS5yZW1vdmVDbGFzcyhcImJhck9uXCIpKVxufSwgVHJhaWxlci5wcm90b3R5cGUub25QcmV2UGxheWxpc3QgPSBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5wcmV2aW91cygpXG59LCBUcmFpbGVyLnByb3RvdHlwZS5vbk5leHRQbGF5bGlzdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLm5leHQoKVxufSwgVHJhaWxlci5wcm90b3R5cGUub25TY3J1YiA9IGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNlZWsoTWF0aC5mbG9vcigodC5wYWdlWCAtICh0aGlzLm9mZnNldC5sZWZ0IC0gd2luZG93LmlubmVyV2lkdGgpKSAvICQoXCIjXCIgKyB0aGlzLnBhcmFtYXRlcnMuY3VzdG9tQnV0dG9ucy5zY3J1YmJlcikud2lkdGgoKSAqIHRoaXMuZHVyYXRpb24oKSkpLCAkKFwiI3l0LXByb2dyZXNzLWluZGljYXRvclwiKS5jc3MoXCJ3aWR0aFwiLCAodC5wYWdlWCAtICh0aGlzLm9mZnNldC5sZWZ0IC0gd2luZG93LmlubmVyV2lkdGgpKSAvICQoXCIjXCIgKyB0aGlzLnBhcmFtYXRlcnMuY3VzdG9tQnV0dG9ucy5zY3J1YmJlcikud2lkdGgoKSAqIDEwMCArIFwiJVwiKVxufSwgVHJhaWxlci5wcm90b3R5cGUub25QbGF5ZXJTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAxID09PSB0LmRhdGEgPyAodGhpcy51cGRhdGVUaW1lID0gc2V0SW50ZXJ2YWwodGhpcy5kaXNwbGF5VGltZS5iaW5kKHRoaXMpLCA1MDApLCAkKFwiLnBsYXktYnV0dG9uXCIpLnJlbW92ZUNsYXNzKFwicGF1c2VkXCIpKSA6IChjbGVhckludGVydmFsKHRoaXMudXBkYXRlVGltZSksICQoXCIucGxheS1idXR0b25cIikuYWRkQ2xhc3MoXCJwYXVzZWRcIikpXG59LCBUcmFpbGVyLnByb3RvdHlwZS5kaXNwbGF5VGltZSA9IGZ1bmN0aW9uKHQpIHtcbiAgICBUd2Vlbk1heC50bygkKFwiI3l0LXByb2dyZXNzLWluZGljYXRvclwiKSwgLjUsIHtcbiAgICAgICAgd2lkdGg6IHRoaXMudGltZSgpIC8gdGhpcy5kdXJhdGlvbigpICogJChcIiNcIiArIHRoaXMucGFyYW1hdGVycy5jdXN0b21CdXR0b25zLnNjcnViYmVyKS53aWR0aCgpXG4gICAgfSlcbn0sIFRyYWlsZXIucHJvdG90eXBlLm9uVmlkZW9SZXNpemUgPSBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGUsIGksIHMgPSB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgbyA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBzIC8gLjU2MjUgPCBvID8gKGUgPSBNYXRoLmNlaWwoLjU2MjUgKiBvKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb250YWluZXJJRCkuc3R5bGUud2lkdGggPSBlICsgXCJweFwiLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbnRhaW5lcklEKS5zdHlsZS5oZWlnaHQgPSBlICsgXCJweFwiLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbnRhaW5lcklEKS5zdHlsZS5sZWZ0ID0gKHMgLSBlKSAvIDIgKyBcInB4XCIsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuY29udGFpbmVySUQpLnN0eWxlLnRvcCA9IFwiMHB4XCIpIDogKGkgPSBNYXRoLmNlaWwocyAvIC41NjI1KSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb250YWluZXJJRCkuc3R5bGUud2lkdGggPSBzICsgXCJweFwiLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbnRhaW5lcklEKS5zdHlsZS5oZWlnaHQgPSBpICsgXCJweFwiLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmNvbnRhaW5lcklEKS5zdHlsZS5sZWZ0ID0gXCIwcHhcIiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb250YWluZXJJRCkuc3R5bGUudG9wID0gKG8gLSBpKSAvIDIgKyBcInB4XCIpXG59LCBUcmFpbGVyLnByb3RvdHlwZS5jdWVQbGF5bGlzdEluZGV4ID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHRoaXMuY3VlUGxheWxpc3QoZSlcbn0sIFRyYWlsZXIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbigpIHtcbiAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcIm5vc2Nyb2xsXCIpLCBcImRlc2t0b3BcIiAhPT0gRGV0ZWN0aXpyLmRldmljZS50eXBlICYmIChkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGFwcC5vblNjcm9sbCwgITEpLCB0aGlzLnNjcm9sbFBvcyA9ICQoXCJib2R5XCIpLnNjcm9sbFRvcCgpKSwgVHdlZW5NYXguc2V0KHRoaXMudmlldywge1xuICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICB9KSwgVHdlZW5NYXguZnJvbVRvKHRoaXMudmlldywgLjYyNSwge1xuICAgICAgICBsZWZ0OiBcIjEwMHZ3XCJcbiAgICB9LCB7XG4gICAgICAgIGxlZnQ6IFwiMHZ3XCIsXG4gICAgICAgIGVhc2U6IFBvd2VyNC5lYXNlSW5PdXQsXG4gICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgXCJkZXNrdG9wXCIgPT0gRGV0ZWN0aXpyLmRldmljZS50eXBlICYmIHRoaXMucGxheSgpLCBUd2Vlbk1heC5zZXQoJChcIiNvdmVybGF5LWltYWdlXCIpLCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJub25lXCIsXG4gICAgICAgICAgICAgICAgZGVsYXk6IC4zNVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgfSksICQoXCIjdHJhaWxlcl9iYXJzIC5iYXJcIikuYWRkQ2xhc3MoXCJiYXJPblwiKSwgdGhpcy51bm11dGUoKSwgYXBwLmhvbWVWaWV3LnNvdW5kTWFuYWdlci5tdXRlZCA/IHRoaXMuc291bmRQbGF5aW5nID0gITEgOiAoYXBwLmhvbWVWaWV3LnNvdW5kTWFuYWdlci5tdXRlQWxsKCksIHRoaXMuc291bmRQbGF5aW5nID0gITApLCBhcHAuZGlzcGF0Y2hlci5kaXNwYXRjaChcIk1VVEVfTVVTSUNcIiksIGdhKFwic2VuZFwiLCBcImV2ZW50XCIsIFwiVmlkZW9zXCIsIFwicGxheVwiLCBcIlRyYWlsZXJcIilcbn0sIFRyYWlsZXIucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpIHtcbiAgICAkKFwiYm9keVwiKS5yZW1vdmVDbGFzcyhcIm5vc2Nyb2xsXCIpLCBcImRlc2t0b3BcIiAhPT0gRGV0ZWN0aXpyLmRldmljZS50eXBlICYmIChkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGFwcC5vblNjcm9sbCwgITEpLCAkKFwiYm9keVwiKS5zY3JvbGxUb3AodGhpcy5zY3JvbGxQb3MpKSwgdGhpcy52aWV3LmhpZGRlbiA9ICEwLCB0aGlzLnN0b3AoKSwgVHdlZW5NYXguc2V0KCQoXCIjb3ZlcmxheS1pbWFnZVwiKSwge1xuICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICB9KSwgVHdlZW5NYXguZnJvbVRvKHRoaXMudmlldywgLjYyNSwge1xuICAgICAgICBsZWZ0OiBcIjB2d1wiXG4gICAgfSwge1xuICAgICAgICBsZWZ0OiBcIjEwMHZ3XCIsXG4gICAgICAgIGVhc2U6IFBvd2VyNC5lYXNlSW5PdXQsXG4gICAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxuICAgICAgICB9LmJpbmQodGhpcylcbiAgICB9KSwgdGhpcy5zb3VuZFBsYXlpbmcgJiYgYXBwLmhvbWVWaWV3LnNvdW5kTWFuYWdlci51bk11dGUoKSwgYXBwLmRpc3BhdGNoZXIuZGlzcGF0Y2goXCJVTk1VVEVfTVVTSUNcIilcbn0sIEFzc2V0TWFuYWdlciA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICB0aGlzLm1hbmlmZXN0ID0gdCwgdGhpcy5wcmVsb2FkID0gbmV3IGNyZWF0ZWpzLkxvYWRRdWV1ZSgoITApKSwgdGhpcy5tYXhDb25lY3Rpb25zID0gNiwgdGhpcy5kaXNwYXRjaGVyID0gdm9pZCAwICE9PSBlID8gZSA6IG5ldyBEaXNwYXRjaGVyXG59LCBBc3NldE1hbmFnZXIucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBBc3NldE1hbmFnZXIsXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7fSxcbiAgICBzZXRNYXhDb25uZWN0aW9uczogZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLm1heENvbmVjdGlvbnMgPSB0XG4gICAgfSxcbiAgICBnZXRBc3NldDogZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVsb2FkLmdldEl0ZW0odClcbiAgICB9LFxuICAgXG4gICAgb25Qcm9ncmVzczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5kaXNwYXRjaChcIkFNX1BST0dSRVNTX0dcIiwgMTAwICogdGhpcy5wcmVsb2FkLnByb2dyZXNzKVxuICAgIH0sXG4gICAgb25Db21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucHJlbG9hZC5vZmYoXCJwcm9ncmVzc1wiLCB0aGlzLnByb2dyZXNzRXZlbnQpLCB0aGlzLnByZWxvYWQub2ZmKFwiY29tcGxldGVcIiwgdGhpcy5jb21wbGV0ZUV2ZW50KSwgdGhpcy5wcmVsb2FkLm9mZihcImVycm9yXCIsIHRoaXMuZXJyb3JFdmVudCksIHRoaXMuZGlzcGF0Y2hlci5kaXNwYXRjaChcIkFNX0NPTVBMRVRFX0dcIilcbiAgICB9LFxuICAgIGhhbmRsZUZpbGVFcnJvcjogZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmVycm9yID0gITAsIGNvbnNvbGUubG9nKHQudHlwZSArIFwiISB8IFwiICsgdC50aXRsZSArIFwiID0gXCIgKyB0LmRhdGEuc3JjKSwgdGhpcy5kaXNwYXRjaGVyLmRpc3BhdGNoKFwiQU1fRVJST1JfR1wiLCB0KVxuICAgIH0sXG4gICAgb25Db21wbGV0ZVNpbmdsZTogZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnByZWxvYWQub2ZmKFwiY29tcGxldGVcIiwgdGhpcy5zaW5nbGVDb21wbGV0ZUV2ZW50KSwgdGhpcy5kaXNwYXRjaGVyLmRpc3BhdGNoKFwiQU1fU0lOR0xFX0NPTVBMRVRFXCIsIHRoaXMuY3VycmVudElkKSwgdGhpcy5jdXJyZW50SWQgPSBudWxsXG4gICAgfSxcbiAgICBzdGFydExvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnByZWxvYWQubG9hZE1hbmlmZXN0KHRoaXMubWFuaWZlc3QpLCB0aGlzLmJpbmRFdmVudHMoKSwgdGhpcy5wcmVsb2FkLnNldE1heENvbm5lY3Rpb25zKHRoaXMubWF4Q29uZWN0aW9ucylcbiAgICB9LFxuICAgIGxvYWRTaW5nbGVBc3NldDogZnVuY3Rpb24odCwgZSkge1xuICAgICAgICByZXR1cm4gIXRoaXMuY3VycmVudElkICYmICh0aGlzLmN1cnJlbnRJZCA9IHQsIHRoaXMuc2luZ2xlQ29tcGxldGVFdmVudCA9IHRoaXMucHJlbG9hZC5vbihcImNvbXBsZXRlXCIsIHRoaXMub25Db21wbGV0ZVNpbmdsZS5iaW5kKHRoaXMpKSwgdGhpcy5wcmVsb2FkLmxvYWRGaWxlKHtcbiAgICAgICAgICAgIGlkOiB0LFxuICAgICAgICAgICAgc3JjOiBlXG4gICAgICAgIH0pLCAhMClcbiAgICB9LFxuICAgIGJpbmRFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnByb2dyZXNzRXZlbnQgPSB0aGlzLnByZWxvYWQub24oXCJwcm9ncmVzc1wiLCB0aGlzLm9uUHJvZ3Jlc3MuYmluZCh0aGlzKSksIHRoaXMuY29tcGxldGVFdmVudCA9IHRoaXMucHJlbG9hZC5vbihcImNvbXBsZXRlXCIsIHRoaXMub25Db21wbGV0ZS5iaW5kKHRoaXMpKSwgdGhpcy5lcnJvckV2ZW50ID0gdGhpcy5wcmVsb2FkLm9uKFwiZXJyb3JcIiwgdGhpcy5oYW5kbGVGaWxlRXJyb3IuYmluZCh0aGlzKSlcbiAgICB9LFxuICAgIHVwZGF0ZVNvdW5kRGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldHRpbmdzLnNvdW5kcyAmJiBzZXR0aW5ncy5zb3VuZHMuZm9yRWFjaChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuZ2V0QXNzZXQodC5pZCk7XG4gICAgICAgICAgICBlICYmICh0LnNyYyA9IGUuc3JjLCBjb25zb2xlLmxvZyh0LnNyYykpXG4gICAgICAgIH0uYmluZCh0aGlzKSlcbiAgICB9XG59LCBWaWRlbzUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgdGhpcy52aWRlbywgdGhpcy5kaXNwYXRjaGVyID0gdm9pZCAwICE9PSBlID8gZSA6IG5ldyBEaXNwYXRjaGVyLCB0aGlzLmluZm8gPSB2b2lkIDAgIT09IHQgPyB0IDoge30sIHRoaXMuaW5pdCgpXG59LCBWaWRlbzUucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBWaWRlbzUsXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMudmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidmlkZW9cIiksIHRoaXMuaW5mb1tcImNsYXNzXCJdICYmICh0aGlzLnZpZGVvLmNsYXNzTmFtZSA9IHRoaXMuaW5mb1tcImNsYXNzXCJdKSwgdGhpcy5pbmZvLmlkICYmICh0aGlzLnZpZGVvLmlkID0gdGhpcy5pbmZvLmlkKSwgdGhpcy52aWRlby5wcmVsb2FkID0gISF0aGlzLmluZm8ucHJlbG9hZCAmJiB0aGlzLmluZm8ucHJlbG9hZCwgdGhpcy52aWRlby5wb3N0ZXIgPSAhIXRoaXMuaW5mby5wb3N0ZXIgJiYgdGhpcy5pbmZvLnBvc3RlciwgdGhpcy52aWRlby5hdXRvcGxheSA9ICEhdGhpcy5pbmZvLmF1dG9wbGF5ICYmIHRoaXMuaW5mby5hdXRvcGxheSwgdGhpcy52aWRlby5sb29wID0gISF0aGlzLmluZm8ubG9vcCAmJiB0aGlzLmluZm8ubG9vcCwgdGhpcy52aWRlby5jb250cm9scyA9ICF0aGlzLmluZm8uY29udHJvbHMgfHwgdGhpcy5pbmZvLmNvbnRyb2xzLCB0aGlzLnZpZGVvLmNhbnBsYXkgPSB0aGlzLm9uVmlkZW9SZWFkeS5iaW5kKHRoaXMpLCB0aGlzLnZpZGVvLm9uZW5kZWQgPSB0aGlzLm9uVmlkZW9FbmRlZC5iaW5kKHRoaXMpLCB0aGlzLnZpZGVvLmFwcGVuZENoaWxkKHRoaXMuYWRkU291cmNlKHRoaXMuaW5mby5zcmMsIHRoaXMuaW5mby50eXBlID8gdGhpcy5pbmZvLnR5cGUgOiBcInZpZGVvL21wNFwiKSlcbiAgICB9LFxuICAgIGR1cmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlkZW8uZHVyYXRpb25cbiAgICB9LFxuICAgIHRpbWU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWRlby5jdXJyZW50VGltZVxuICAgIH0sXG4gICAgcGxheTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVhZHkgJiYgdGhpcy52aWRlby5wbGF5KClcbiAgICB9LFxuICAgIHBhdXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWFkeSAmJiB0aGlzLnZpZGVvLnBhdXNlKClcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnZpZGVvLnBhdXNlKCksIHRoaXMudmlkZW8uc3JjID0gXCJcIiwgdGhpcy52aWRlby5sb2FkKCksIHRoaXMudmlkZW8gPSBudWxsXG4gICAgfSxcbiAgICBzd2FwU3JjOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMudmlkZW8uc3JjID0gdCwgdGhpcy52aWRlby5sb2FkKCksIHRoaXMudmlkZW9IYWNrKClcbiAgICB9LFxuICAgIG9uVmlkZW9SZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVhZHkgPSAhMCwgdGhpcy5kaXNwYXRjaGVyLmRpc3BhdGNoKFwiVklERU9fUkVBRFlcIilcbiAgICB9LFxuICAgIG9uVmlkZW9FbmRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5kaXNwYXRjaChcIlZJREVPX0VORFwiKVxuICAgIH0sXG4gICAgYWRkU291cmNlOiBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNvdXJjZVwiKTtcbiAgICAgICAgcmV0dXJuIGkudHlwZSA9IGUsIGkuc3JjID0gdCwgaVxuICAgIH1cbn07Il0sImZpbGUiOiJ0b21teS5taW4uanMifQ==
//# sourceMappingURL=data:application/json;charset=utf8;base64,
