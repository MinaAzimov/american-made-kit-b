homeView = function(e, t) {
    this.container = e, this.dispatcher = void 0 !== t ? t : new Dispatcher, this.device = Detectizr.device.type, this.sections = ["home", "story", "castncrew", "gallery", "videos", "tickets"]
}, homeView.prototype = {
    constructor: homeView,
    init: function() {
        this.dispatcher.dispatch("ANALYTICS", {
            hitType: "pageview",
            page: "www.mylink"
        }), this.dispatcher.dispatch("ANALYTICS", {
            hitType: "event",
            eventCategory: "Videos",
            eventAction: "play",
            eventLabel: "Fall Campaign"
        }), this.addYoutubeVideo(), "mobile" != Detectizr.device.type ? this.initPreload() : (this.initPreloadMobile(), $("#splash").show(), $("body").removeClass("noscroll"), 
        document.getElementById("splash_trailer").addEventListener("click", function() {
            app.dispatcher.dispatch("SHOW_TRAILER")
        }),
        document.getElementById("splash_trailer2").addEventListener("click", function() {
            app.dispatcher.dispatch("SHOW_TRAILER")
        }),
        document.getElementById("splash_trailer3").addEventListener("click", function() {
            app.dispatcher.dispatch("SHOW_TRAILER")
        }),
        document.getElementById("splash_trailer4").addEventListener("click", function() {
            app.dispatcher.dispatch("SHOW_TRAILER")
        })),
        "desktop" !== app.device && "safari" == app.browser && this.onIOSdevice(app.device)
    },
    onSplashHide: function() {
        document.removeEventListener("touchmove", app.onScroll, !1), $("#splash").hide(), this.initPreload(), $("body").removeClass("noscroll")
    },
    onLoadComplete: function() {
       this.populate(), window.scrollTo(0, 0)
    },
    onIntroComplete: function() {
        app.preloader.startLoad()
    },
    onIOSdevice: function(e) {
        switch (e) {
            case "tablet":
                $("#title_block").css("bottom", "70px"), $("#logo_cannes").css("max-width", "60px"), $("#btn_scroll").css("margin-bottom", "30px"), $("#touts").css("bottom", "90px"), $("#quote_container").css("bottom", "90px"), $("#yt-controls").css("bottom", "50px");
                break;
            case "mobile":
                $("#title_block").css("margin-bottom", "50px"), $("#btn_scroll").css("margin-bottom", "50px"), $("#logo_cannes").css("max-width", "50px"), $("#yt-controls").css("bottom", "70px");
                break;
            default:
                console.log("invalid device")
        }
    },
    preventScroll: function(e) {
        e.preventDefault(), e.stopPropagation()
    },
    populate: function() {
        for (i = 0; i < data.home.tout.length; i++) $("#touts").append('<li class="tout" id="tout' + (i + 1) + '"><a href="' + data.home.tout[i].link + '" target="_blank"> <div class="tout_border"></div> <img src="' + data.home.tout[i].img + '" />  <div class="tout_inner"><h1>' + data.home.tout[i].label + "</h1></div></a></li>");
        for (i = 0; i < data.home.quote.length; i++) $("#quote_container").append('<li id="quote_' + (i + 1) + '"><h1 class="quote_text">' + data.home.quote[i].content + '</h1><p class="quote_source">â€“ ' + data.home.quote[i].source + "</p></li>");
        TweenMax.delayedCall(1, this.homeAnimate.bind(this)), this.bindEvents()
    },
    homeAnimate: function() {
        document.getElementById("tout_video").play();
        var e = new TimelineMax;
        e.set($("#btn_scroll_outer"), {
            transformOrign: "50% 50%"
        }).set($("#btn_scroll_middle"), {
            transformOrign: "50% 50%"
        }).set($("#btn_scroll_inner"), {
            transformOrign: "50% 50%"
        }).fromTo($("#btn_scroll_outer"), .5, {
            scale: 0
        }, {
            scale: 1,
            ease: Back.easeOut.config(2)
        }, "grp").fromTo($("#btn_scroll_middle"), .35, {
            scale: 0
        }, {
            scale: 1,
            delay: .1,
            ease: Back.easeOut.config(2)
        }, "grp").fromTo($("#btn_scroll_inner"), .25, {
            scale: 0
        }, {
            scale: 1,
            delay: .3,
            ease: Circ.easeOut
        }, "grp").fromTo($("#btn_scroll_text"), .25, {
            y: 20,
            opacity: 0
        }, {
            y: 10,
            opacity: 1,
            delay: .5,
            ease: Power2.easeOut,
            onComplete: function() {
            
                $("#btn_scroll").mouseenter(function() {
                    TweenMax.fromTo($("#btn_scroll_text"), .5, {
                        y: 10
                    }, {
                        y: 5,
                        ease: Circ.easeInOut
                    }), TweenMax.to($("#btn_scroll_divider"), .25, {
                        clip: "rect(0px, 10px, 1px, 0px)",
                        delay: .1,
                        ease: Circ.easeInOut
                    }), TweenMax.to($("#btn_scroll_outer"), .35, {
                        scale: 1.1,
                        delay: .05,
                        ease: Power2.easeInOut
                    }), TweenMax.to($("#btn_scroll_middle"), .25, {
                        scale: 1.05,
                        opacity: .9,
                        ease: Power2.easeInOut
                    }), TweenMax.to($("#btn_scroll_inner"), .25, {
                        scale: 1.1,
                        ease: Power2.easeInOut
                    })
                }).mouseleave(function() {
                    TweenMax.to($("#btn_scroll_divider"), .25, {
                        clip: "rect(0px, 5px, 1px, 5px)",
                        ease: Circ.easeInOut
                    }), TweenMax.fromTo($("#btn_scroll_text"), .25, {
                        y: 5
                    }, {
                        y: 10,
                        delay: .1,
                        ease: Circ.easeInOut
                    }), TweenMax.to($("#btn_scroll_outer"), .5, {
                        scale: 1,
                        ease: Power2.easeInOut
                    }), TweenMax.to($("#btn_scroll_middle"), .35, {
                        scale: 1,
                        opacity: .75,
                        delay: .1,
                        ease: Power2.easeInOut
                    }), TweenMax.to($("#btn_scroll_inner"), .35, {
                        scale: 1,
                        delay: .15,
                        ease: Power2.easeInOut
                    })
                }), document.getElementById("btn_scroll").addEventListener("click", function() {
                    TweenMax.to($("body"), 1, {
                        scrollTo: {
                            y: window.innerHeight * 2.55
                        },
                        ease: Power4.easeInOut
                    })
                }.bind(this))
            }.bind(this)
        }, "grp");
        var t = new TimelineMax({
            delay: 2,
            repeat: -1
        });
        t.staggerFromTo($("#btn_scroll_arrows img"), .15, {
            y: -3,
            opacity: 0
        }, {
            y: 0,
            opacity: 1,
            ease: Power3.easeOut
        }, .05).staggerFromTo($("#btn_scroll_arrows img"), .15, {
            y: 0,
            opacity: 1
        }, {
            y: 3,
            opacity: 0,
            delay: 1.5,
            ease: Power3.easeOut
        }, .05);
        var s = new TimelineMax({
            repeat: -1
        });
        for (i = 1; i <= data.home.quote.length; i++) s.add(TweenLite.fromTo($("#quote_" + i), .75, {
            opacity: 0,
            x: 25
        }, {
            opacity: 1,
            x: 0,
            ease: Power3.easeInOut
        }, "grp" + i)), s.add(TweenLite.fromTo($("#quote_" + i), .75, {
            opacity: 1,
            x: 0
        }, {
            opacity: 0,
            x: -25,
            delay: 7.6,
            ease: Power3.easeInOut
        }, "grp" + i))
    },
    initPreload: function() {
        app.preloader = new AssetManager(settings.initialManifest, app.dispatcher), this.dispatcher.addEventlistener("AM_COMPLETE_G", this.onLoadComplete.bind(this)), this.dispatcher.addEventlistener("INTRO_DONE_EVENT", this.onIntroComplete.bind(this)), this.preloadView = new PreloadView(app.dispatcher), this.preloadView.intro()
    },
    initPreloadMobile: function() {
           app.preloader = new AssetManager(settingsmobile.initialManifest, app.dispatcher), this.dispatcher.addEventlistener("AM_COMPLETE_G", this.onLoadComplete.bind(this)), this.dispatcher.addEventlistener("INTRO_DONE_EVENT", this.onIntroComplete.bind(this)), this.preloadView = new PreloadView(app.dispatcher), this.preloadView.intro()
    },
    bindEvents: function() {
        for (i = 0; i < this.sections.length; i++) TweenMax.set($("#nav-" + this.sections[i] + " .nav-margin-top"), {
            clip: "rect(0px, 0px, 1px, 0px)"
        }), TweenMax.set($("#nav-" + this.sections[i] + " .nav-margin-bottom"), {
            clip: "rect(0px, 0px, 1px, " + $("#nav-" + this.sections[i]).width() + "px)"
        });
        $(".navbar-main li").mouseenter(function() {
            TweenMax.to($(this).find(".nav-margin-top"), .35, {
                clip: "rect(0px, " + ((this.offsetWidth - 40) / 2 + 5) + "px, 1px, 0px)",
                ease: Circ.easeIn
            }), TweenMax.to($(this).find(".nav-margin-top"), .25, {
                clip: "rect(0px, " + ((this.offsetWidth - 40) / 2 + 5) + "px, 1px, " + ((this.offsetWidth - 40) / 2 - 5) + "px)",
                delay: .35,
                ease: Circ.easeOut
            }), TweenMax.to($(this).find(".nav-margin-bottom"), .35, {
                clip: "rect(0px, " + (this.offsetWidth - 40) + "px, 1px, " + ((this.offsetWidth - 40) / 2 - 5) + "px)",
                ease: Circ.easeIn
            }), TweenMax.to($(this).find(".nav-margin-bottom"), .25, {
                clip: "rect(0px, " + ((this.offsetWidth - 40) / 2 + 5) + "px, 1px, " + ((this.offsetWidth - 40) / 2 - 5) + "px)",
                delay: .35,
                ease: Circ.easeOut
            })
        }).mouseleave(function() {
            TweenMax.to($(this).find(".nav-margin-top"), .35, {
                clip: "rect(0px, " + (this.offsetWidth - 40) + "px, 1px, " + ((this.offsetWidth - 40) / 2 - 5) + "px)",
                ease: Circ.easeIn
            }), TweenMax.to($(this).find(".nav-margin-top"), .25, {
                clip: "rect(0px, " + (this.offsetWidth - 40) + "px, 1px, " + (this.offsetWidth - 40) + "px)",
                delay: .35,
                ease: Circ.easeOut
            }), TweenMax.set($(this).find(".nav-margin-top"), {
                clip: "rect(0px, 0px, 1px, 0px)",
                delay: .6
            }), TweenMax.to($(this).find(".nav-margin-bottom"), .35, {
                clip: "rect(0px, " + ((this.offsetWidth - 40) / 2 + 5) + "px, 1px, 0px)",
                ease: Circ.easeIn
            }), TweenMax.to($(this).find(".nav-margin-bottom"), .25, {
                clip: "rect(0px, 0px, 1px, 0px)",
                delay: .35,
                ease: Circ.easeOut
            }), TweenMax.set($(this).find(".nav-margin-bottom"), {
                clip: "rect(0px, 0px, 1px, " + (this.offsetWidth - 40) + "px)",
                delay: .6
            })
        }),  $("#tout_trailer").mouseenter(function() {
            TweenMax.set($("#tout_trailer_btn_over"), {
                transformOrign: "50% 50%"
            }), TweenMax.to($(this).find(".tout_border"), .25, {
                "border-width": "4px",
                ease: Power4.easeOut
            }), TweenMax.to($(this).find("#tout_trailer_btn_over"), .15, {
                scale: 1,
                ease: Power4.easeOut
            }), TweenMax.to($(this).find("#tout_trailer_btn_over img"), .15, {
                x: 34,
                delay: .15,
                ease: Power4.easeOut
            })
        }).mouseleave(function() {
            TweenMax.to($(this).find(".tout_border"), .25, {
                "border-width": "2px",
                ease: Power4.easeOut
            }), TweenMax.to($(this).find("#tout_trailer_btn_over img"), .15, {
                x: 0,
                ease: Power4.easeOut
            }), TweenMax.to($(this).find("#tout_trailer_btn_over"), .15, {
                scale: 0,
                delay: .15,
                ease: Power4.easeOut
            })
        }), $(".tout").mouseenter(function() {
            TweenMax.to($(this).find(".tout_border"), .25, {
                "border-width": "4px",
                ease: Power4.easeOut
            }), TweenMax.fromTo($(this).find("h1"), .2, {
                y: 0,
                opacity: 1
            }, {
                y: 6,
                opacity: 0,
                ease: Power3.easeOut
            }), TweenMax.fromTo($(this).find("h1"), .2, {
                y: -6,
                opacity: 0
            }, {
                y: 0,
                opacity: 1,
                delay: .2,
                ease: Power3.easeOut
            })
        }).mouseleave(function() {
            TweenMax.to($(this).find(".tout_border"), .25, {
                "border-width": "2px",
                ease: Power4.easeOut
            }), TweenMax.fromTo($(this).find("h1"), .2, {
                y: 0,
                opacity: 1
            }, {
                y: -6,
                opacity: 0,
                ease: Power3.easeOut
            }), TweenMax.fromTo($(this).find("h1"), .2, {
                y: 6,
                opacity: 0
            }, {
                y: 0,
                opacity: 1,
                delay: .2,
                ease: Power3.easeOut
            })
        })
    },
   
    addYoutubeVideo: function() {
        var e = {
                playBtn: "yt-playtoggle",
                scrubber: "yt-progress-holder",
                soundBtn: "yt-soundtoggle",
                prevBtn: "yt-previous",
                nextBtn: "yt-next"
            },
            t = {
                containerID: "trailer_overlay",
                id: "AEBIJRAkujM",
                closeBtn: "yt-close",
                list: !0,
                index: 0,
                showinfo: 0,
                autoplay: 0,
                controls: 0,
                loop: 1,
                customControls: !0,
                customBackground: !0,
                dispatcher: app.dispatcher,
                customButtons: e
            };
        this.yt = new Trailer(t, app.dispatcher), this.yt.add(), document.getElementById("nav_trailer").addEventListener("click", function() {
            "desktop" !== this.device && $(".navbar-toggle").click(), app.dispatcher.dispatch("SHOW_TRAILER")
        }.bind(this)), document.getElementById("tout_trailer").addEventListener("click", function() {
            app.dispatcher.dispatch("SHOW_TRAILER")
        })
    }
}, PreloadView = function(e) {
    this.vh = -1 * window.innerHeight, this.view = document.getElementById("preloader"), this.content = document.getElementById("preloader-content"), this.dispatcher = void 0 !== e ? e : new Dispatcher, this.device = Detectizr.device.type, this.tl = new TimelineMax({
        delay: .5
    }), this.split = new SplitText("#preloader-text", {
        type: "chars"
    }), this.init()
}, PreloadView.prototype = {
    constructor: PreloadView,
    init: function() {
        this.bindEvents(), this.intro(), chars = this.split.chars, $('#preloader').addClass('animating') ,this.tl.set($("#preloader-indicator"), {
            clip: "rect(0px, " + $("#preloader-indicator").width() * 2 + "px, 2px, " + $("#preloader-indicator").width() * 2 + "px)"
        }).set($("#preloader-content h1"), {
            opacity: 1
        }).to($("#preloader-indicator"), .5, {
            clip: "rect(0px, " + $("#preloader-indicator").width() + "px, 2px, 0px)",
            ease: Power1.easeInOut
        }).set($("#preloader-indicator-bg"), {
            opacity: 1
        }).fromTo($("#preloader-tt-1"), 0.9, {
            opacity: 0,
            y: 80
        }, {
            opacity: 1,
            y: 0,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-2"), 2.0, {
            opacity: 0,
            y: 80
        }, {
            opacity: 1,
            y: 0,
            delay: .1,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-3"), 0.7, {
            opacity: 0,
            y: 20
        }, {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-4"), 1.7, {
            opacity: 0,
            y: 40
        },{
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-5"), 1.2, {
            opacity: 0,
            y: 50
        },
        {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-6"), 0.8, {
            opacity: 0,
            y: 60
        },
        {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-7"), 2.5, {
            opacity: 0,
            y: 70
        }, 
        {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-8"), 0.9, {
            opacity: 0,
            y: 80
        },  
         {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-9"), 0.5, {
            opacity: 0,
            y: -90
        },
         {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-10"), 1.7, {
            opacity: 0,
            y: -60
        },
         {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, "grp1").fromTo($("#preloader-tt-11"), 1.1, {
            opacity: 0,
            y: -80
        },
         {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power4.easeOut
        }, "grp1").fromTo($("#preloader-tt-12"), 2.1, {
            opacity: 0,
            y: -60
        },  {
            opacity: 1,
            y: 0,
            delay: .3,
            ease: Power3.easeOut,
            onComplete: function() {
                this.dispatcher.dispatch("INTRO_DONE_EVENT")
            }.bind(this)
        }, "grp1").staggerFromTo(chars, .75, {
            opacity: 0,
            y: -10
        }, {
            opacity: 1,
            y: 0,
            delay: .2,
            ease: Power3.easeOut
        }, .05, "grp1").to($("#preloader-indicator"), .5, {
            clip: "rect(0px, " + $("#preloader-indicator").width() * -200 + "px, 2px, " + $("#preloader-indicator").width() * -200 + "px)",
            delay: .2,
            ease: Power1.easeInOut
        }, "grp1")
    },
    updateProgress: function(e, t) {
        TweenMax.to($("#preloader-indicator"), .25, {
            clip: "rect(200px, " + (t / -100 * $("#preloader-indicator").width() * -200 + $("#preloader-indicator").width() * -200) + "px, 2px, " + ($("#preloader-indicator").width() * -200 + t / 100 * $("#preloader-indicator").width() * 200) + "px)"
        })
    },
    onLoaded: function(e, t) {
        this.outro(), this.dispatcher.removeEventlistener(this.progressEvent), this.dispatcher.removeEventlistener(this.completeEvent),

        (function(window) {



    // Helper vars and functions.
    function extend( a, b ) {
        for( var key in b ) { 
            if( b.hasOwnProperty( key ) ) {
                a[key] = b[key];
            }
        }
        return a;
    }
    // From https://davidwalsh.name/javascript-debounce-function.
    function debounce(func, wait, immediate) {
        var timeout;
        return function() {
            var context = this, args = arguments;
            var later = function() {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    };
    // Creates a sorted array of random numbers between minVal and maxVal with a length = size.
    function createRandIntOrderedArray(minVal, maxVal, size) {
        var arr = [];
        for(var i=0; i<size; ++i) {
            arr.push(anime.random(minVal, maxVal));
        }
        arr.sort(function(a, b){ return a-b });
        return arr;
    }
    // Checks if an object is empty.
    function isObjEmpty(obj) {
        return Object.getOwnPropertyNames(obj).length > 0;
    }
    // Concatenate JS objs.
    // From http://stackoverflow.com/a/2454315.
    function collect() {
        var ret = {};
        var len = arguments.length;
        for (var i=0; i<len; i++) {
            for (var p in arguments[i]) {
                if (arguments[i].hasOwnProperty(p)) {
                    ret[p] = arguments[i][p];
                }
            }
        }
        return ret;
    }
    // Check if clip-path is supported. From http://stackoverflow.com/a/30041538.
    function areClipPathShapesSupported() {
        var base = 'clipPath',
            prefixes = [ 'webkit', 'moz', 'ms', 'o' ],
            properties = [ base ],
            testElement = document.createElement( 'testelement' ),
            attribute = 'polygon(50% 0%, 0% 100%, 100% 100%)';

        // Push the prefixed properties into the array of properties.
        for ( var i = 0, l = prefixes.length; i < l; i++ ) {
            var prefixedProperty = prefixes[i] + base.charAt( 0 ).toUpperCase() + base.slice( 1 ); // remember to capitalize!
            properties.push( prefixedProperty );
        }

        // Interate over the properties and see if they pass two tests.
        for ( var i = 0, l = properties.length; i < l; i++ ) {
            var property = properties[i];

            // First, they need to even support clip-path (IE <= 11 does not)...
            if ( testElement.style[property] === '' ) {

                // Second, we need to see what happens when we try to create a CSS shape...
                testElement.style[property] = attribute;
                if ( testElement.style[property] !== '' ) {
                    return true;
                }
            }
        }
        return false;
    };

    /**
     * Segmenter obj.
     */
    function Segmenter(el, options) {
        this.el = el;
        this.options = extend({}, this.options);
        extend(this.options, options);
        // Preload main image.
        var self = this;
        imagesLoaded(this.el, { background: true }, function() {
            self._init();
            self._initEvents();
            self.options.onReady();
        });
    }

    Segmenter.prototype.options = {
        // Number of pieces.
        pieces: 4, 
        // Show pieces already styled.
        renderOnLoad: false,
        // Add an element for the shadow.
        shadows: true,
        // Animations for the shadow (valid properties: opacity, translateX, translateY).
        shadowsAnimation: {
            opacity: 1,
            // translateX: 20,
            // translateY: 20
        },
        // Parrallax effect for the pieces.
        parallax: false,
        // Movements for the parallax effect.
        parallaxMovement: {min: 10, max: 40},
        // Animation for the pieces (valid properties: duration, easing, delay, opacity, translate[XYZ]).
        animation: {
            duration: 1500,
            easing: 'easeOutQuad',
            delay: 0, // Delay increment per piece.
            // opacity: 0.5,
            translateZ: {min: 10, max: 65}, // We can also use an integer for a specific value.
            // translateX: {min: -100, max: 100}, // We can also use an integer for a specific value.
            // translateY: {min: -100, max: 100} // We can also use an integer for a specific value.
        },
        // Callbacks
        onReady: function() { return false; },
        onAnimationComplete: function() { return false; },
        onAnimationStart: function() { return false; },
        // The positions of the pieces in percentage values. 
        // We can also use random values by setting options.positions to "random".
        positions: [
            {top: 80, left: 10, width: 30, height: 20},
            {top: 2, left: 2, width: 40, height: 40},
            {top: 30, left: 60, width: 30, height: 60},
            {top: 10, left: 20, width: 50, height: 60}
        ]
    };

    /**
     * Init!
     */
    Segmenter.prototype._init = function() {
        // The dimensions of the main element.
        this.dimensions = {
            width: this.el.offsetWidth,
            height: this.el.offsetHeight
        };
        
        // The source of the main image.
        var background = this.el.style.backgroundImage;
        this.imgsrc = background.replace('url(','').replace(')','').replace(/\"/gi, "");;
        
        // Create the layout.
        this._layout();

        var self = this;
        this.pieces = [].slice.call(this.el.querySelectorAll('.segmenter__piece-wrap'));
        this.pieces.forEach(function(piece, pos) {
            // Bugfix for Chrome. The translateZ needs an initial value otherwise the animation will not work. (this seems to be a anime.js bug - letÂ´s wait for the next version..)
            piece.style.WebkitTransform = piece.style.transform = 'translateZ(0.0001px)';

            // If we want to render the different pieces on load then:
            if( self.options.renderOnLoad ) {
                self._renderPiece(piece);
            }
        });
        // Flag to indicate the pieces are already rendered/styled either on load or after the animation.
        if( this.options.renderOnLoad ) {
            this.active = true;
        }
    };

    /**
     * Creates the layout.
     */
    Segmenter.prototype._layout = function() {
        // clip-path support
        var clipPath = areClipPathShapesSupported();

        var segBgEl = document.createElement('div');
        segBgEl.className = 'segmenter__background';
        segBgEl.style.backgroundImage = 'url(' + this.imgsrc + ')';

        var segPieces = document.createElement('div'),
            segPiecesHTML = '',
            positionsTotal = this.options.positions.length;

        segPieces.className = 'segmenter__pieces';

        for(var i = 0, len = this.options.pieces; i < len; ++i) {
            if( this.options.parallax ) {
                segPiecesHTML += '<div class="segmenter__piece-parallax">';
            }

            segPiecesHTML += '<div class="segmenter__piece-wrap">';
            
            var top, left, width, height, clipTop, clipLeft, clipRight, clipBottom,
                pos = i <= positionsTotal - 1 ? i : 0,
                isRandom = this.options.positions === 'random';

            top = isRandom ? anime.random(0,100) : this.options.positions[pos].top;
            left = isRandom ? anime.random(0,100) : this.options.positions[pos].left;
            width = isRandom ? anime.random(0,100) : this.options.positions[pos].width;
            height = isRandom ? anime.random(0,100) : this.options.positions[pos].height;
            
            if( !clipPath ) {
                clipTop = isRandom ? top/100 * this.dimensions.height : this.options.positions[pos].top/100 * this.dimensions.height;
                clipLeft = isRandom ? left/100 * this.dimensions.width : this.options.positions[pos].left/100 * this.dimensions.width;
                clipRight = isRandom ? width/100 * this.dimensions.width + clipLeft : this.options.positions[pos].width/100 * this.dimensions.width + clipLeft;
                clipBottom = isRandom ? height/100 * this.dimensions.height + clipTop : this.options.positions[pos].height/100 * this.dimensions.height + clipTop;
            }

            if( this.options.shadows ) {
                segPiecesHTML += '<div class="segmenter__shadow" style="top: ' + top + '%; left: ' + left + '%; width: ' + width + '%; height: ' + height + '%"></div>';        
            }

            segPiecesHTML += clipPath ?
                            '<div class="segmenter__piece" style="background-image: url(' + this.imgsrc + '); -webkit-clip-path: polygon(' + left + '% ' + top + '%, ' + (left + width) + '% ' + top + '%, ' + (left + width) + '% ' + (top + height) + '%, ' + left + '% ' + (top + height) + '%); clip-path: polygon(' + left + '% ' + top + '%, ' + (left + width) + '% ' + top + '%, ' + (left + width) + '% ' + (top + height) + '%, ' + left + '% ' + (top + height) + '%)"></div>' :
                            '<div class="segmenter__piece" style="background-image: url(' + this.imgsrc + '); clip: rect(' + clipTop + 'px,' + clipRight + 'px,' + clipBottom + 'px,' + clipLeft + 'px)"></div>';

            segPiecesHTML += '</div>'
            if( this.options.parallax ) {
                segPiecesHTML += '</div>';
            }
        }

        segPieces.innerHTML = segPiecesHTML;

        this.el.innerHTML = '';
        this.el.appendChild(segBgEl);
        this.el.appendChild(segPieces);
    };

    /**
     * Renders/Styles a piece with the options that are passed in the initialization.
     */
    Segmenter.prototype._renderPiece = function(piece) {
        var idx = this.pieces.indexOf(piece);
        var self = this;
        if( self.options.animation.translateZ != undefined ) {
            if( typeof self.options.animation.translateZ === 'object' ) {
                var randArr = createRandIntOrderedArray(self.options.animation.translateZ.min, self.options.animation.translateZ.max, self.options.pieces);
                piece.style.transform = piece.style.WebkitTransform = 'translateZ(' + randArr[idx] + 'px)';
            }
            else {
                piece.style.transform = piece.style.WebkitTransform = 'translateZ(' + self.options.animation.translateZ + 'px)';
            }
        }
        if( self.options.animation.translateY != undefined ) {
            if( typeof self.options.animation.translateY === 'object' ) {
                var randArr = createRandIntOrderedArray(self.options.animation.translateY.min, self.options.animation.translateY.max, self.options.pieces);
                piece.style.transform = piece.style.WebkitTransform = 'translateY(' + randArr[idx] + 'px)';
            }
            else {
                piece.style.transform = piece.style.WebkitTransform = 'translateY(' + self.options.animation.translateY + 'px)';
            }
        }
        if( self.options.animation.translateX != undefined ) {
            if( typeof self.options.animation.translateX === 'object' ) {
                var randArr = createRandIntOrderedArray(self.options.animation.translateX.min, self.options.animation.translateX.max, self.options.pieces);
                piece.style.transform = piece.style.WebkitTransform = 'translateX(' + randArr[idx] + 'px)';
            }
            else {
                piece.style.transform = piece.style.WebkitTransform = 'translateX(' + self.options.animation.translateX + 'px)';
            }
        }
        if( self.options.animation.opacity != undefined ) {
            piece.style.opacity = self.options.animation.opacity;
        }

        if( self.options.shadows && isObjEmpty(self.options.shadowsAnimation) ) {
            var shadowEl = piece.querySelector('.segmenter__shadow');
            shadowEl.style.opacity = self.options.shadowsAnimation.opacity != undefined ? self.options.shadowsAnimation.opacity : 0;
            shadowEl.style.transform = shadowEl.style.WebkitTransform = 'translateX(' + (self.options.shadowsAnimation.translateX != undefined ? self.options.shadowsAnimation.translateX : 0) + 'px) translateY(' + (self.options.shadowsAnimation.translateY != undefined ? self.options.shadowsAnimation.translateY : 0) + 'px)';
        }
    };

    /**
     * Animates the pieces with the options passed (with anime.js).
     */
    Segmenter.prototype.animate = function() {
        if( this.active ) {
            return false;
        }
        this.active = true;

        var self = this,
            animProps = {
                targets: this.pieces,
                duration: this.options.animation.duration,
                delay: function(el, index) { return (self.options.pieces - index - 1) * self.options.animation.delay; },
                easing: this.options.animation.easing,
                begin: this.options.onAnimationStart,
                complete: this.options.onAnimationComplete
            };
        
        if( this.options.animation.translateZ != undefined ) {
            var randArr = createRandIntOrderedArray(this.options.animation.translateZ.min, this.options.animation.translateZ.max, this.options.pieces);
            animProps.translateZ = typeof this.options.animation.translateZ === 'object' ? function(el, index) {
                return randArr[index];
            } : this.options.animation.translateZ;
        }
        if( this.options.animation.translateX != undefined ) {
            animProps.translateX = typeof this.options.animation.translateX === 'object' ? function(el, index) {
                return anime.random(self.options.animation.translateX.min, self.options.animation.translateX.max);
            } : this.options.animation.translateX;
        }
        if( this.options.animation.translateY != undefined ) {
            animProps.translateY = typeof this.options.animation.translateY === 'object' ? function(el, index) {
                return anime.random(self.options.animation.translateY.min, self.options.animation.translateY.max);
            } : this.options.animation.translateY;
        }
        if( this.options.animation.opacity != undefined ) {
            animProps.opacity = this.options.animation.opacity;
        }

        anime(animProps);

        // Also animate the shadow element.
        if( this.options.shadows && isObjEmpty(this.options.shadowsAnimation) ) {
            anime(collect({
                targets: this.el.querySelectorAll('.segmenter__shadow'),
                duration: this.options.animation.duration,
                delay: function(el, index) { return (self.options.pieces - index - 1) * self.options.animation.delay; },
                easing: this.options.animation.easing
            }, this.options.shadowsAnimation));
        }
    };

    /**
     * Init/Bind events.
     */
    Segmenter.prototype._initEvents = function() {
        var self = this;
        
        // Window resize.
        this.debounceResize = debounce(function(ev) {
            var positionsTotal = self.options.positions.length;

            // Recalculate dimensions.
            self.dimensions = {
                width: self.el.offsetWidth,
                height: self.el.offsetHeight
            };

            // Recalculate clip values..
            // todo: DRY
            // todo: If random is true then save the initial values. Should not recalculate for this case.
            self.pieces.forEach(function(piece, position) {
                var clipTop, clipLeft, clipRight, clipBottom,
                    segmenterPiece = piece.querySelector('.segmenter__piece');

                if( self.options.positions === 'random' ) {
                    var randT = anime.random(0,100), randL = anime.random(0,100), randW = anime.random(0,100), randH = anime.random(0,100);
                    clipTop = randT/100 * self.dimensions.height;
                    clipLeft = randL/100 * self.dimensions.width;
                    clipRight = randW/100 * self.dimensions.width + clipLeft;
                    clipBottom = randH/100 * self.dimensions.height + clipTop;
                }
                else {
                    var pos = position <= positionsTotal - 1 ? position : 0;
                    clipTop = self.options.positions[pos].top/100 * self.dimensions.height;
                    clipLeft = self.options.positions[pos].left/100 * self.dimensions.width;
                    clipRight = self.options.positions[pos].width/100 * self.dimensions.width + clipLeft;
                    clipBottom = self.options.positions[pos].height/100 * self.dimensions.height + clipTop;
                }

                segmenterPiece.style.clip = 'rect(' + clipTop + 'px,' + clipRight + 'px,' + clipBottom + 'px,' + clipLeft + 'px)';
            });
        }, 10);
        window.addEventListener('resize', this.debounceResize);
        
        // Mousemove and Deviceorientation:
        if( this.options.parallax ) {
            var arrRand = createRandIntOrderedArray(this.options.parallaxMovement.min, this.options.parallaxMovement.max, this.options.pieces);
            this.pieces.forEach(function(piece, pos) {
                piece.setAttribute('data-parallax-translation', typeof self.options.parallaxMovement === 'object' ? arrRand[pos] : self.options.parallaxMovement );
            });
            this.mousemove = function(ev) {
                if( !self.active ) {
                    return false;
                }
                requestAnimationFrame(function() {
                    self.pieces.forEach(function(piece) {
                        var t = piece.getAttribute('data-parallax-translation'),
                            transX = t/(self.dimensions.width)*ev.clientX - t/2,
                            transY = t/(self.dimensions.height)*ev.clientY - t/2;

                        piece.parentNode.style.transform = piece.parentNode.style.WebkitTransform = 'translate3d(' + transX + 'px,' + transY + 'px,0)';
                    });
                });
            };
            window.addEventListener('mousemove', this.mousemove);

            this.handleOrientation = function() {
                if( !self.active ) {
                    return false;
                }
                var y = event.gamma;
                // To make computation easier we shift the range of x and y to [0,180]
                y += 90;
                
                requestAnimationFrame(function() {
                    self.pieces.forEach(function(piece) {
                        var t = piece.getAttribute('data-parallax-translation'),
                            transX = t/(self.dimensions.width)*y - t/2,
                            transY = t/(self.dimensions.height)*y - t/2;

                        piece.parentNode.style.transform = piece.parentNode.style.WebkitTransform = 'translate3d(' + transX + 'px,' + transY + 'px,0)';
                    });
                });
            }
            window.addEventListener('deviceorientation', this.handleOrientation);
        }
    };

    window.Segmenter = Segmenter;

})(window);

               function imageAnimation() {
          var headline = document.querySelector('.trigger-headline');
          var headlinetom = document.querySelector('.trigger-headline-tom'),
            
          trigger = document.querySelector('.home'),
          segmenter = new Segmenter(document.querySelector('.segmenter'), {
            pieces: 9,
            positions: [
            {top: 30, left: 5, width: 40, height: 80},
            {top: 50, left: 25, width: 30, height: 30},
            {top: 5, left: 75, width: 40, height: 20},
            {top: 30, left: 45, width: 40, height: 20},
            {top: 45, left: 15, width: 50, height: 40},
            {top: 10, left: 40, width: 10, height: 20},
            {top: 20, left: 50, width: 30, height: 70},
            {top: 0, left: 10, width: 50, height: 60},
            {top: 70, left: 40, width: 30, height: 30}
            ],
            animation: {
              duration: 2000,
              easing: 'easeInOutCubic',
              delay: 0,
              opacity: 1,
              translateZ: 85,
              translateX: {min: -20, max: 20},
              translateY: {min: -20, max: 20}
            },
            parallax: true,
            parallaxMovement: {min: -10, max: -5},
            onReady: function() {
              if ($('#home_sec').css('top') <= '0px') {
                setTimeout(function() {
                 headline.classList.remove('trigger-headline--hidden');
                  setTimeout(function() {
                 headlinetom.classList.remove('trigger-headline-tom--hidden');
                 segmenter.animate();
                       }, 350)
               }, 1000)
              }          
            },
            onAnimationComplete: function () {

            }

          });
          trigger.addEventListener('click', function() {
           headline.classList.add('trigger-headline--hidden');
             setTimeout(function() {
            headlinetom.classList.add('trigger-headline-tom--hidden');
                    }, 350)
           setTimeout(function() {
            segmenter.active = false;
            setTimeout(function() {

              headline.classList.remove('trigger-headline--hidden');
               setTimeout(function() {
              headlinetom.classList.remove('trigger-headline-tom--hidden');
                    }, 350)
              segmenter.animate();
            }, 1000)  

          }, 1000)                   
         });
        }

        imageAnimation(); 
    },
    onIntroComplete: function(e) {
        TweenMax.set(this.view, {
            opacity: 1
        })
    },
    onOutroComplete: function(e) {
        TweenMax.set(this.view, {
            display: "none"
        }), this.dispatcher.dispatch("OUTRO_DONE_EVENT")
    },
    bindEvents: function() {
        this.progressEvent = this.dispatcher.addEventlistener("AM_PROGRESS_G", this.updateProgress.bind(this)), this.completeEvent = this.dispatcher.addEventlistener("AM_COMPLETE_G", this.onLoaded.bind(this))
    },
    intro: function() {
        TweenMax.fromTo(this.view, 1, {
            opacity: 1
        }, {
            opacity: 1,
            onComplete: this.onIntroComplete.bind(this)
        })
    },
    outro: function() {
        TweenMax.fromTo(this.view, .75, {
            y: 0
        }, {
            y: this.vh,
            delay: .75,
            ease: Power4.easeOut,
            onComplete: this.onOutroComplete.bind(this)
        }), TweenMax.fromTo($("#dimmer"), .75, {
            opacity: 1
        }, {
            opacity: 0,
            delay: .5,
            ease: Power4.easeIn,
            onComplete: function() {
                $("#dimmer").css({
                    "z-index": 9,
                    opacity: "0"
                })
            }.bind(this)
        })
    }
}, scrollView = function(e) {
    this.dispatcher = void 0 !== e ? e : new Dispatcher, this.device = Detectizr.device.type, this.controller = new ScrollMagic.Controller, this.sections = ["home_sec", "story_sec", "castncrew_sec", "gallery_sec", "videos_sec", "tickets_sec"], this.sectionNames = ["home", "story", "castncrew", "gallery", "videos", "tickets"], this.curSection = 0, this.scrollHeight = 0, this.scrollOffset = 0, this.scenes = [], this.navScenes = [], this.clientHeight, this.scrollTo, this.scrollPos
}, scrollView.prototype = {
    constructor: scrollView,
    init: function() {
        if (this.dispatcher.dispatch("SCROLL_INIT"), this.bindEvents(), this.setbodyHeight(), 
            this.createNavScene("navbar", this.scrollHeight - document.getElementById(this.sections[0]).clientHeight, document.getElementById(this.sections[0]).clientHeight, "navbar", ".navbar", "nav-darken"),
            this.createNavScene("footer", this.scrollHeight - document.getElementById(this.sections[0]).clientHeight, document.getElementById(this.sections[0]).clientHeight, "footer", ".footer", "nav-darken"), "desktop" == this.device)
            this.createScene("home_secScroll", document.getElementById("home_sec").clientHeight, document.getElementById("home_sec").clientHeight, this.getOffset(0), this.sections[0], "#nav-" + this.sectionNames[0], "active", 0), 
            this.createScene("story_secScroll", document.getElementById("story_sec").clientHeight, document.getElementById("story_sec").clientHeight, this.getOffset(1), this.sections[1], "#nav-" + this.sectionNames[1], "active", 1),
            this.createScene("castncrew_secScroll", document.getElementById("castncrew_sec").clientHeight, document.getElementById("castncrew_sec").clientHeight, this.getOffset(2), this.sections[2], "#nav-" + this.sectionNames[2], "active", 2),
            this.createScene("gallery_secScroll", document.getElementById("gallery_sec").clientHeight, document.getElementById("gallery_sec").clientHeight, this.getOffset(3), this.sections[3], "#nav-" + this.sectionNames[3], "active", 3), 
            this.createScene("videos_secScroll", document.getElementById("videos_sec").clientHeight, document.getElementById("videos_sec").clientHeight, this.getOffset(4), this.sections[4], "#nav-" + this.sectionNames[4], "active", 4),
            this.createScene("tickets_secScroll", document.getElementById("tickets_sec").clientHeight, document.getElementById("tickets_sec").clientHeight, this.getOffset(5), this.sections[5], "#nav-" + this.sectionNames[5], "active", 5);
        else
            for (i = 0; i < this.sections.length; i++) this.createMobileScene(this.sections[i] + "Scroll", document.getElementById(this.sections[i]).clientHeight, this.getOffset(i), this.sections[i], "#nav-" + this.sectionNames[i], "active", i)
    },
    bindEvents: function() {
        this.hashEvent = this.dispatcher.addEventlistener("HASH_EVENT", this.onHashEvent.bind(this)), "desktop" == this.device && $(window).resize(this.resize.bind(this)), $(".navbar-main li").click(this.navigateOnClick.bind(this)), $(".navbar-toggle").click(function() {
            $(this).toggleClass("open")
        });
        this.hashEvent = this.dispatcher.addEventlistener("HASH_EVENT", this.onHashEvent.bind(this)), "desktop" == this.device && $(window).resize(this.resize.bind(this)), $(".navbar-right li").click(this.navigateOnClick.bind(this)), $(".navbar-toggle").click(function() {
            $(this).toggleClass("open")
        })
    },
    onHashEvent: function(e, t) {
        this.scrollTo = t, this.navigateTo(this.scrollTo)
    },
    setbodyHeight: function() {
        for (this.scrollHeight = 0, i = 0; i < this.sections.length; i++) this.scrollHeight = this.scrollHeight + document.getElementById(this.sections[i]).clientHeight;
        $("body").css("height", this.scrollHeight + "px")
    },
    createScene: function(e, t, s, o, n, a, r, c) {
        var d = new TimelineMax;
        "story_secScroll" === e ? d.to(document.getElementById(n), 1, {
            top: -1 * s + "px",
            onUpdate: function() {
                this.dispatcher.dispatch("STORY_SCROLL_EVENT", parseInt(document.getElementById("story_sec").style.top))
            }.bind(this),
            force3D: !0,
            autoRound: !1,
            ease: Power0.easeNone
        }) : d.to(document.getElementById(n), 1, {
            top: -1 * s + "px",
            force3D: !0,
            autoRound: !1,
            ease: Power0.easeNone
        });
        var e = new ScrollMagic.Scene({
            triggerElement: "body",
            triggerHook: "onLeave",
            duration: t,
            offset: o,
            reverse: !0
        }).setTween(d).setClassToggle(a, r).on("leave", function(e) {
            "FORWARD" === e.target.controller().info("scrollDirection") ? (this.curSection++, this.curSection > 6 && (this.curSection = 6), window.location.hash = this.sectionNames[this.curSection]) : (this.curSection--, this.curSection < 0 && (this.curSection = 0), window.location.hash = this.sectionNames[this.curSection])
        }.bind(this)).addTo(this.controller);
        e.indicator = n, e.ch = document.getElementById(n).clientHeight, e.id = document.getElementById(n), e.index = i, this.scenes.push(e)
    },
    createMobileScene: function(e, t, i, s, o, n, a) {
        new ScrollMagic.Scene({
            triggerElement: "body",
            triggerHook: "onLeave",
            duration: t,
            offset: i,
            reverse: !0
        }).setClassToggle(o, n).on("leave", function(e) {
            "FORWARD" === e.target.controller().info("scrollDirection") ? this.curSection++ : this.curSection--
        }.bind(this)).addTo(this.controller)
    },
    createNavScene: function(e, t, s, o, n, a) {
        var e = new ScrollMagic.Scene({
            triggerElement: "body",
            triggerHook: "onLeave",
            duration: t,
            offset: s,
            reverse: !0
        }).setClassToggle(n, a).on("leave", function(e) {
            $(".navbar").addClass("nav-lighten"), $("#footer").addClass("nav-lighten"), "desktop" == this.device && TweenMax.fromTo($(".navbar-brand"), .5, {
                opacity: 1,
                x: 0
            }, {
                opacity: 0,
                x: -25,
                ease: Power3.easeOut
            })
        }.bind(this)).on("enter", function(e) {
            $(".navbar").removeClass("nav-lighten"), $("#footer").removeClass("nav-lighten"), "desktop" == this.device && TweenMax.fromTo($(".navbar-brand"), .5, {
                opacity: 0,
                x: -25
            }, {
                opacity: 1,
                delay: .5,
                x: 0,
                ease: Power3.easeOut
            })
        }.bind(this)).addTo(this.controller);
        e.indicator = o, e.ch = document.getElementById(o).clientHeight, e.id = document.getElementById(o), e.index = i, this.navScenes.push(e)
    },
    navigateOnClick: function(e) {
        "desktop" !== this.device && $(".navbar-toggle").click(), this.scrollTo = $(e.currentTarget).attr("id"), this.scrollTo = this.sectionNames.indexOf(this.scrollTo.substring(4)), this.navigateTo(this.scrollTo)
    },
    navigateTo: function(e) {
        for (this.scrollPos = 0, i = 0; i < this.scrollTo; i++) this.scrollPos = this.scrollPos + document.getElementById(this.sections[i]).clientHeight;
        "mobile" !== app.device && (window.location.hash = this.sectionNames[i]), "desktop" == this.device ? e < this.curSection ? (TweenMax.set($("#nav-lock"), {
            "z-index": "11"
        }), TweenMax.fromTo($("#nav-mask"), .75, {
            clip: "rect(0px, " + window.innerWidth + "px, 0px, 0px)"
        }, {
            clip: "rect(0px, " + window.innerWidth + "px, " + window.innerHeight + "px, 0px)",
            ease: Power3.easeInOut,
            onComplete: function() {
                $("body").scrollTop(this.scrollPos), TweenMax.fromTo($("#nav-mask"), 1, {
                    opacity: 1
                }, {
                    opacity: 0,
                    ease: Power1.easeOut,
                    onComplete: function() {

                        TweenMax.set($("#nav-mask"), {
                            clip: "rect(0px, " + window.innerWidth + "px, 0px, 0px)",
                            opacity: 1
                        }), TweenMax.set($("#nav-lock"), {
                            "z-index": "1"
                        })
                    }
                })
            }.bind(this)
        })) : e > this.curSection ? (TweenMax.set($("#nav-lock"), {
            "z-index": "11"
        }), TweenMax.fromTo($("#nav-mask"), .75, {
            clip: "rect(" + window.innerHeight + "px, " + window.innerWidth + "px, " + window.innerHeight + "px, 0px)"
        }, {
            clip: "rect(0px, " + window.innerWidth + "px, " + window.innerHeight + "px, 0px)",
            ease: Power3.easeInOut,
            onComplete: function() {
                $("body").scrollTop(this.scrollPos), TweenMax.fromTo($("#nav-mask"), 1, {
                    opacity: 1
                }, {
                    opacity: 0,
                    ease: Power1.easeOut,
                    onComplete: function() {
                        TweenMax.set($("#nav-mask"), {
                            clip: "rect(0px, " + window.innerWidth + "px, 0px, 0px)",
                            opacity: 1
                        }), TweenMax.set($("#nav-lock"), {
                            "z-index": "1"
                        })
                    }
                })
            }.bind(this)
        })) : e === this.curSection : $("body").scrollTop(this.scrollPos)
    },
    getTween: function(e) {
        return TweenMax.fromTo(document.getElementById(e), 1, {
            top: "0px"
        }, {
            top: -1 * document.getElementById(e).clientHeight + "px",
            force3D: !0,
            autoRound: !1,
            ease: Power0.easeNone
        })
    },
    getOffset: function(e) {
        var t = 0;
        for (i = 0; i < e; i++) t += document.getElementById(this.sections[i]).clientHeight;
        return t
    },
    resize: function() {
        this.setbodyHeight()
        if (!window.screenTop && !window.screenY) {
    window.location.reload();
}

    },
    updateFixedValues: function() {
        this.scenes.forEach(function(e, t) {
            var i = this.getTween(e.indicator);
            i.progress(0), e.setTween(i), e.offset(this.getOffset(e.index)), e.duration(e.id.clientHeight), e.refresh(), e.update(!0)
        }.bind(this));
        var e = new TimelineMax;
        e.to(document.getElementById("story_sec"), 1, {
            top: -1 * document.getElementById("story_sec").clientHeight + "px",
            onUpdate: function() {
                this.dispatcher.dispatch("STORY_SCROLL_EVENT", parseInt(document.getElementById("story_sec").style.top))
            }.bind(this),
            force3D: !0,
            autoRound: !1,
            ease: Power0.easeNone
        }), this.scenes[i].setTween(e), this.scenes[i].refresh(), this.scenes[i].update(!0), this.navScenes.forEach(function(e, t) {
            e.offset(document.getElementById(this.sections[0]).clientHeight), e.duration($(window).height() - document.getElementById(this.sections[0]).clientHeight), e.refresh(), e.update(!0)
        }.bind(this))
    }
}, footerView = function(e) {
    this.dispatcher = void 0 !== e ? e : new Dispatcher, this.device = Detectizr.device.type
}, footerView.prototype = {
    constructor: footerView,
    init: function() {
        this.bindEvents()
    },
    populate: function() {
        for (i = 0; i < data.footer.billingBlock.length; i++) $(".footer_billingblock_container").append('<i class="footer_billingblock am-icon ' + data.footer.billingBlock[i] + '"></i>');
        for ($("#footer_logos").append('<p>' + data.footer.footerText + '</p>'), i = 0; i < data.footer.footerLinks.length; i++) data.footer.footerLinks[i].hasOwnProperty("link") ? $("#footer_links").append('<li><a href="' + data.footer.footerLinks[i].link + '" target="_blank">' + data.footer.footerLinks[i].label + "</a></li>") : $("#footer_links").append("<li>" + data.footer.footerLinks[i].label + "</li>")
    },
    bindEvents: function() {
        $("#btn_sound").mouseenter(function() {
            TweenMax.to($(this).find(".btn_footer_inner"), .25, {
                border: "1px solid rgba(116, 140, 132, 1)",
                ease: Power3.easeOut
            })
        }).mouseleave(function() {
            TweenMax.to($(this).find(".btn_footer_inner"), .25, {
                border: "1px solid rgba(116, 140, 132, 0.5)",
                ease: Power3.easeOut
            })
        }), $("#btn_legal").mouseenter(function() {
            TweenMax.to($(this).find(".btn_footer_inner"), .25, {
                border: "1px solid rgba(116, 140, 132, 1)",
                ease: Power3.easeOut
            }), TweenMax.fromTo($(this).find("p"), .2, {
                y: 0,
                opacity: 1
            }, {
                y: 6,
                opacity: 0,
                ease: Power3.easeOut
            }), TweenMax.fromTo($(this).find("p"), .2, {
                y: -6,
                opacity: 0
            }, {
                y: 0,
                opacity: 1,
                delay: .2,
                ease: Power3.easeOut
            })
        }).mouseleave(function() {
            TweenMax.to($(this).find(".btn_footer_inner"), .25, {
                border: "1px solid rgba(116, 140, 132, 0.5)",
                ease: Power3.easeOut
            }), TweenMax.fromTo($(this).find("p"), .2, {
                y: 0,
                opacity: 1
            }, {
                y: -6,
                opacity: 0,
                ease: Power3.easeOut
            }), TweenMax.fromTo($(this).find("p"), .2, {
                y: 6,
                opacity: 0
            }, {
                y: 0,
                opacity: 1,
                delay: .2,
                ease: Power3.easeOut
            })
        }), $("#footer_close").mouseenter(function() {
            TweenMax.set($(this).find(".close-outer"), {
                transformOrigin: "50% 50%"
            }), TweenMax.set($(this).find(".close-inner"), {
                transformOrigin: "50% 50%"
            }), TweenMax.set($(this).find(".close-img"), {
                transformOrigin: "50% 50%"
            }), TweenMax.to($(this).find(".close-outer"), .25, {
                scale: 1.2,
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".close-inner"), .25, {
                scale: 1.15,
                border: "1px solid rgba(255, 254, 237, 0.75)",
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".close-img"), .4, {
                rotation: 90,
                ease: Power3.easeOut
            })
        }).mouseleave(function() {
            TweenMax.to($(this).find(".close-outer"), .25, {
                scale: 1,
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".close-inner"), .25, {
                scale: 1,
                border: "1px solid rgba(255, 254, 237, 0.2)",
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".close-img"), .4, {
                rotation: 0,
                ease: Power3.easeOut
            })
        }), $("#btn_legal").click(this.footerExpand.bind(this)), $("#nav_legal").click(this.footerExpand.bind(this)), $("#footer_close").click(this.footerCollapse.bind(this)), this.completeEvent = this.dispatcher.addEventlistener("AM_COMPLETE_G", this.populate.bind(this)), $("#footer-overlay").mouseleave(this.footerCollapse.bind(this)), $("#btn_sound").click(function() {
            $(".bar").toggleClass("barOn")
        })
    },
    footerExpand: function(e) {
        "mobile" == this.device ? ($(".navbar-toggle").click(), $("#footer-overlay").hasClass("mobile_footer_expanded") ? this.footerCollapse() : ($("#footer-overlay").removeClass("mobile_footer_collapsed"), $("#footer-overlay").addClass("mobile_footer_expanded"))) : $("#footer-overlay").hasClass("footer_expanded") ? this.footerCollapse() : ($("#footer-overlay").removeClass("footer_collapsed"), $("#footer-overlay").addClass("footer_expanded"))
    },
    footerCollapse: function() {
        "mobile" == this.device ? $("#footer-overlay").hasClass("mobile_footer_expanded") && $("#footer-overlay").removeClass("mobile_footer_expanded").addClass("mobile_footer_collapsed") : $("#footer-overlay").hasClass("footer_expanded") && $("#footer-overlay").removeClass("footer_expanded").addClass("footer_collapsed")
    }
},  storyView = function(e) {
    this.dispatcher = void 0 !== e ? e : new Dispatcher, this.device = Detectizr.device.type, this.controller = new ScrollMagic.Controller, this.scenes = []
}, storyView.prototype = {
    constructor: storyView,
    init: function() {
        this.bindEvents()
    },
    bindEvents: function() {
        this.completeEvent = this.dispatcher.addEventlistener("AM_COMPLETE_G", this.populate.bind(this)), this.scrollUpdate = this.dispatcher.addEventlistener("STORY_SCROLL_EVENT", this.updateBind.bind(this)), "desktop" == this.device && $(window).resize(this.updateFixedValues.bind(this))
    },
    updateBind: function(e, t) {

        if ($('#story_sec').css('top') <= '-100%' || ($('#s1_text1').css('opacity') == '1')) { 

             ($('#nav-overlay').css('opacity', '0')); 

        }

        if ($('#story_sec').css('top') <= '-100%' || ($('#s1_text1').css('opacity') == '0')) {
             ($('#nav-overlay').css('opacity', '1')); 
        }
        
       TweenMax.set(".s1_text1B", {
            top: "calc( 50vh + " + Math.abs(t) + "px)"
        }), TweenMax.set("#s5_text_a", {
            "margin-top": "calc(" + Math.abs(t) + "px - 525vh)"
        })
    },
    populate: function() {
            $("#story1").css("background-image", "url('" + app.preloader.getAsset("story1bg").src + "')"),
            $("#s1_fg").attr("src", app.preloader.getAsset("story1fg").src),
            $("#s1_cloud1").attr("src", app.preloader.getAsset("story1cloud1").src),
            $("#s1_cloud2").attr("src", app.preloader.getAsset("story1cloud2").src),
            $("#s1_cloud3").attr("src", app.preloader.getAsset("story1cloud3").src),


            $("#story6").css("background-image", "url('" + app.preloader.getAsset("story6bg").src + "')"),
            $("#s6_fg").attr("src", app.preloader.getAsset("story6fg").src),
            $("#story7").css("background-image", "url('" + app.preloader.getAsset("story7bg").src + "')"), "mobile" !== this.device ? ($("#story2").vide(app.preloader.getAsset("story2vid").src, {
            posterType: "jpg",
            autoplay: !0,
            loop: !0
        }), $("#story3").vide(app.preloader.getAsset("story3vid").src, {
            posterType: "jpg",
            autoplay: !0,
            loop: !0
        }), $("#story4").vide(app.preloader.getAsset("story4vid").src, {
            posterType: "jpg",
            autoplay: !0,
            loop: !0
        })) : ($("#story2").css("background-image", "url(" + app.preloader.getAsset("story2bg_mob").src + ")"), $("#story3").css("background-image", "url(" + app.preloader.getAsset("story3bg_mob").src + ")"), $("#story4").css("background-image", "url(" + app.preloader.getAsset("story4bg_mob").src + ")")),
         "desktop" == this.device ? tween1_1=TweenMax.fromTo(".s1_text1", .5, {
            opacity: 1, y: 0
        },{
            opacity: 0,
            y: 50,
            ease: Power4.easeOut,
            onComplete: function() {
                TweenMax.set(".s1_text1", {
                    opacity: 0
                })
            }
        }
        ):tween1_1=TweenMax.fromTo(".s1_text1", .5, {
            y: 0,
            opacity: 1
        },{
            y: document.getElementById("story1").clientHeight-window.innerHeight, opacity: 0
        }
        ), "desktop" == this.device ? tween1_2 = TweenMax.fromTo(".s1_text1B", .5, {
            opacity: 0,
            y: 500,
            

        }, {
            opacity: 4,
            y: document.getElementById("home_sec").clientHeight-window.innerHeight / 1.7,
            ease: Power1.easeOut,
            onComplete: function() {

                TweenMax.set(".s1_text1B", {
                    opacity: 1,
                   
                })
            }
        }) : tween1_2 = TweenMax.fromTo(".s1_text1B", .5, {
            opacity: 0,
            y: 0
        }, {
            opacity: 1,
            y: document.getElementById("story1").clientHeight-window.innerHeight,
        }), tween1_3 = TweenMax.fromTo("#s1_text2", .5, {
            y: 0,
            opacity: 1
        }, {
            y: document.getElementById("story1").clientHeight - window.innerHeight,
            opacity: 0
        }), {
            opacity: 1
        }, tween1_5 = TweenMax.fromTo("#btn_scroll", .5, {
            y: 0,
            opacity: 1
        }, {
            y: (document.getElementById("story1").clientHeight / 3) - window.innerHeight,
            opacity: 0
        }), {
            opacity: 1
        },  tween2_1 = new TimelineMax, tween2_1.fromTo("#s2_text h1", .5, {
            opacity: 0
        }, {
            opacity: 1,
            ease: Power4.easeInOut
        }, "group").fromTo("#s2_text div", .5, {
            scale: 0
        }, {
            scale: 1,
            delay: .3,
            ease: Power2.easeInOut
        }, "group").fromTo("#s2_text p", .5, {
            opacity: 0
        }, {
            opacity: 1,
            delay: .9,
            ease: Power2.easeInOut
        }, "group").fromTo("#s2_text h2", .5, {
            opacity: 0
        }, {
            opacity: 1,
            delay: .9,
            ease: Power2.easeInOut
        }, "group"),
          tween6_1 = new TimelineMax, tween6_1.fromTo("#s6_text h1", 0.5, {
            opacity: 0
        }, {
            opacity: 1,
            ease: Power4.easeInOut
        }, "group").fromTo("#s6_text div", .5, {
            scale: 0
        }, {
            scale: 1,
            delay: .3,
            ease: Power2.easeInOut
        }, "group").fromTo("#s6_text p", .5, {
            opacity: 0
        }, {
            opacity: 1,
            delay: .6,
            ease: Power2.easeInOut
        }, "group"), tween1_4 = new TimelineMax, tween1_4.fromTo("#s1_text", .5, {
            y: 0
        }, {
            y: -130
        }, "grp1").fromTo("#s1_cloud1", .5, {
            x: .05 * window.innerWidth
        }, {
            x: -.05 * window.innerWidth
        }, "grp1").fromTo("#s1_cloud2", .5, {
            x: .02 * window.innerWidth
        }, {
            x: -.02 * window.innerWidth
        }, "grp1").fromTo("#s1_cloud3", .5, {
            x: 50
        }, {
            x: -50
        }, "grp1"), tween7 = new TimelineMax, tween7.fromTo("#s7_text h1", .5, {
            opacity: 0
        }, {
            opacity: 1,
            ease: Power4.easeInOut
        }).fromTo("#s7_text div", .5, {
            scale: 0
        }, {
            scale: 1,
            ease: Power2.easeInOut
        }).fromTo("#s7_text p", .5, {
            opacity: 0
        }, {
            opacity: 1,
            ease: Power2.easeInOut
        }), this.createScene("story1_1", 150, document.getElementById("story1").clientHeight-window.innerHeight, tween1_1, "story1"),
        this.createScene("story1_2", document.getElementById("story1").clientHeight/4, document.getElementById("story1").clientHeight-1.25*window.innerHeight, tween1_2, "story1"),
        this.createScene("story1_3", document.getElementById("story1").clientHeight/1.5, 2*document.getElementById("s1_text2").clientHeight, tween1_3, "story1"),
        this.createScene("story1_4", document.getElementById("story1").clientHeight / 2, document.getElementById("story1").clientHeight - 1.25 * window.innerHeight, tween1_4, "story1"),
        this.createScene("story1_5", 150, document.getElementById("story1").clientHeight - window.innerHeight, tween1_5, "story1"),
        this.createScene("story2_1", -1 * (document.getElementById("story2").clientHeight / 4), 0, tween2_1, "story2"),
        this.createScene("story6_1", -1 * (document.getElementById("story6").clientHeight / 2), 0, tween6_1, "story6"), 

        this.createScene("story7", -1 * (document.getElementById("story7").clientHeight / 2), 0, tween7, "story7"),
        this.updateBind()
    },
    createScene: function(e, t, s, o, n) {
        var e = new ScrollMagic.Scene({
            triggerElement: "#" + n,
            triggerHook: "onLeave",
            offset: t,
            duration: s,
            reverse: !0
        }).setTween(o).addTo(this.controller);
        e.indicator = n, e.ch = document.getElementById(n).clientHeight, e.id = document.getElementById(n), e.index = i, this.scenes.push(e)
    },
    updateFixedValues: function() {
       
                for(this.scenes[0].duration(document.getElementById("story1").clientHeight-window.innerHeight),
                 this.scenes[1].offset(document.getElementById("story1").clientHeight/4),
                  this.scenes[1].duration(document.getElementById("story1").clientHeight-1.25*window.innerHeight),
                    this.scenes[2].duration(2*document.getElementById("s1_text2").clientHeight),
                    this.scenes[3].offset(-1 * (document.getElementById("story1").clientHeight )),
                    this.scenes[4].offset(-1 * (document.getElementById("story6").clientHeight-1.25*window.innerHeight)),
                    this.scenes[4].duration(document.getElementById("s1_text2").clientHeight),
                    this.scenes[5].offset(-1 * (document.getElementById("story6").clientHeight )),
                    this.scenes[6].offset(-1 * (document.getElementById("story6").clientHeight )),
                     this.scenes[6].duration(1.5 * document.getElementById("story6").clientHeight),
                      this.scenes[7].offset(-1 * (document.getElementById("story7").clientHeight )), i = 0; i < this.scenes.length; i++) this.scenes[i].refresh(), this.scenes[i].update(!0)
                 this.updateBind();
    }
}, castncrewView = function(e) {
    this.dispatcher = void 0 !== e ? e : new Dispatcher, this.device = Detectizr.device.type, this.controller = new ScrollMagic.Controller, this.label, this.split = !0, this.sections = [], this.scenes = [], this.bodyPos = 0
}, castncrewView.prototype = {
    constructor: castncrewView,
    init: function() {
        this.bindEvents()
    },
    bindEvents: function() {
        this.completeEvent = this.dispatcher.addEventlistener("AM_COMPLETE_G", this.populate.bind(this))
    },
    populate: function() {
        if ("desktop" === this.device || "tablet" === this.device)
            for ($("#castncrew-header").html('<div class="cover"><img src="' + 
                data.castncrew.header.desktopBackgroundImage +
                 '" class="cover" /><h1 id="castncrew-header-text">' + 
                 data.castncrew.header.text + '</h1><img src="' + 
                 data.castncrew.header.desktopForegroundImage + '" class="cover" /></div>'), i = 0; i < data.castncrew.list.length; i++)
                this.sections.push("cnc_" + data.castncrew.list[i].label), "half" == data.castncrew.list[i].type ? (this.split && $("#castncrew-list").append('<li class="cnc_split"></li>'),
                this.split = !1, $(".cnc_split").append('<div id="cnc_' + data.castncrew.list[i].label + '" class="cnc_' + data.castncrew.list[i].type + '"><div class="cover cnc_cover"><img src="' + 
                    app.preloader.getAsset(data.castncrew.list[i].desktopImage).src + '" class="cover" /></div><div class="cnc_text_container"><div class="cnc_text"><h1 class="cnc_actor">' + 
                    data.castncrew.list[i].name + '</h1><h1 class="cnc_character">' + 
                    data.castncrew.list[i].role + '</h1><div class="cnc_btn btn_scroll" data-bio="' + 
                    data.castncrew.list[i].label + '"><div class="btn_scroll_outer"><div class="btn_scroll_middle"><div class="btn_scroll_inner"></div></div> </div><h1 class="btn_scroll_text">Bio</h1></div></div>')) : 
                    $("#castncrew-list").append('<li id="cnc_' + data.castncrew.list[i].label + '"><div class="cover cnc_cover"><img src="' + 
                    app.preloader.getAsset(data.castncrew.list[i].desktopImage).src + '" class="cover" /></div><div class="cnc_text_container"><div class="cnc_text"><h1 class="cnc_actor">' + 
                    data.castncrew.list[i].name + '</h1><p>is</p><h1 class="cnc_character">' + 
                    data.castncrew.list[i].role + '</h1><div class="cnc_btn btn_scroll" data-bio="' + 
                    data.castncrew.list[i].label + '"><div class="btn_scroll_outer"><div class="btn_scroll_middle"><div class="btn_scroll_inner"></div></div></div><h1 class="btn_scroll_text">Bio</h1></div></div></div></li>');
        
        else if ("mobile" === this.device)
            for ($("#castncrew-header").html('<div class="cover"><img src="' + 
            data.castncrew.header.mobileBackgroundImage + '" class="cover" /><h1 id="castncrew-header-text">' +
            data.castncrew.header.text + '</h1><img src="' + data.castncrew.header.mobileForegroundImage + '" class="cover" /></div>'), i = 0; i < data.castncrew.list.length; i++)
            this.sections.push("cnc_" + data.castncrew.list[i].label), "half" == data.castncrew.list[i].type ? $("#castncrew-list").append('<li id="cnc_' + data.castncrew.list[i].label + '"><div class="cover"><img src="' + 
                app.preloader.getAsset(data.castncrew.list[i].mobileImage).src + '" class="cover" /></div><div class="cnc_text_container"><div class="cnc_text"><h1 class="cnc_actor">' + 
                data.castncrew.list[i].name + '</h1></br></br> <h1 class="cnc_character">' + data.castncrew.list[i].role + 
                '</h1><div class="cnc_btn" data-bio="' + data.castncrew.list[i].label + '"><img src="img/btn_bio.png"></div></div></div></li>') : 
                $("#castncrew-list").append('<li id="cnc_' + data.castncrew.list[i].label + '"><div class="cover"><img src="' + 
                app.preloader.getAsset(data.castncrew.list[i].mobileImage).src + '" class="cover" /></div><div class="cnc_text_container"><div class="cnc_text"><h1 class="cnc_actor">' + 
                data.castncrew.list[i].name + '</h1><p>is</p><h1 class="cnc_character">' + 
                data.castncrew.list[i].role + '</h1><div class="cnc_btn" data-bio="' + 
                data.castncrew.list[i].label + '"><img src="img/btn_bio.png"></div></div></div></li>');

        $("#cnc_close").mouseenter(function() {
            TweenMax.set($(this).find(".close-outer"), {
                transformOrigin: "50% 50%"
            }), TweenMax.set($(this).find(".close-inner"), {
                transformOrigin: "50% 50%"
            }), TweenMax.set($(this).find(".close-img"), {
                transformOrigin: "50% 50%"
            }), TweenMax.to($(this).find(".close-outer"), .25, {
                scale: 1.2,
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".close-inner"), .25, {
                scale: 1.15,
                border: "1px solid rgba(255, 254, 237, 0.75)",
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".close-img"), .4, {
                rotation: 90,
                ease: Power3.easeOut
            })
        }).mouseleave(function() {
            TweenMax.to($(this).find(".close-outer"), .25, {
                scale: 1,
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".close-inner"), .25, {
                scale: 1,
                border: "1px solid rgba(255, 254, 237, 0.2)",
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".close-img"), .4, {
                rotation: 0,
                ease: Power3.easeOut
            })
        }), $(".cnc_btn").click(this.show), $("#cnc_close").click(this.hide), $(".btn_scroll").mouseenter(function() {
            TweenMax.to($(this).parents("li").find(".cnc_cover"), .55, {
                opacity: .5,
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".btn_scroll_outer"), .35, {
                scale: 1.1,
                delay: .05,
                ease: Power2.easeInOut
            }), TweenMax.to($(this).find(".btn_scroll_middle"), .25, {
                scale: 1.05,
                opacity: .9,
                ease: Power2.easeInOut
            }), TweenMax.to($(this).find(".btn_scroll_inner"), .25, {
                scale: 1.1,
                ease: Power2.easeInOut
            })
        }).mouseleave(function() {
            TweenMax.to($(this).parents("li").find(".cnc_cover"), .55, {
                opacity: 1,
                ease: Power3.easeOut
            }), TweenMax.to($(this).find(".btn_scroll_outer"), .5, {
                scale: 1,
                ease: Power2.easeInOut
            }), TweenMax.to($(this).find(".btn_scroll_middle"), .35, {
                scale: 1,
                opacity: .75,
                delay: .1,
                ease: Power2.easeInOut
            }), TweenMax.to($(this).find("#btn_scroll_inner"), .35, {
                scale: 1,
                delay: .15,
                ease: Power2.easeInOut
            })
        }), this.createScene("cnc_chrispine", 2), this.createScene("cnc_benfoster", 1), this.createScene("cnc_jeffbridges", 1), this.createScene("cnc_taylorsheridan", 1), this.createScene("cnc_davidmackenzie", 1)
    },
    createScene: function(e, t) {
        var e = new ScrollMagic.Scene({
            triggerElement: "#" + e,
            triggerHook: "onLeave",
            offset: -1 * document.getElementById(e).clientHeight / t,
            duration: 3 * document.getElementById(e).clientHeight,
            reverse: !0
        }).setTween(TweenMax.fromTo($("#" + e).find(".cnc_cover img"), 1, {
            transform: "translateY(-50px)"
        }, {
            transform: "translateY(50px)"
        })).addTo(this.controller);
        e.indicator = e, e.index = i, this.scenes.push(e)
    },
    show: function() {
    

                
        for ($("body").addClass("noscroll"), "desktop" !== this.device && (app.bodyPos = $("body").scrollTop()),

        this.label = $(this).data("bio"), document.getElementById("cnc_container").scrollTop = 0, i = 0; i < data.castncrew.list.length; i++) 
        this.label == data.castncrew.list[i].label && ($("#cnc_header h1").html(data.castncrew.list[i].name),
        $("#cnc_text").html("<p>" + data.castncrew.list[i].text  + "</p>"),

   
        $("#cnc_image1").attr("src", app.preloader.getAsset(data.castncrew.list[i].video).src ),

        $("#cnc_char").css("background-image", "url(" + app.preloader.getAsset(data.castncrew.list[i].overlayImage).src + ")")) ;

        TweenMax.set($("#cnc_overlay"), {
            visibility: "visible",
            onComplete: function() {
                $("body").addClass("noscroll")
            }.bind(this)
        }), TweenMax.fromTo($("#cnc_overlay"), .75, {
            left: "-100vw"
        }, {
            left: "0vw",
            ease: Power3.easeOut
        }), TweenMax.fromTo($("#cnc_char"), .75, {
            left: "-60%"
        }, {
            left: "0%",
            ease: Power2.easeOut
        })
    },
    hide: function() {

        $("body").removeClass("noscroll"), "desktop" !== this.device && $("body").scrollTop(app.bodyPos), TweenMax.fromTo($("#cnc_char"), .75, {
            left: "0%"
        }, {
            left: "-60%",
            ease: Power2.easeOut
        }), TweenMax.fromTo($("#cnc_overlay"), .75, {
            left: "0vw"
        }, {
            left: "-100vw",
            ease: Power3.easeOut,
            onComplete: function() {
                $("body").removeClass("noscroll"), TweenMax.set($("#cnc_overlay"), {
                    visibility: "hidden"
                })
            }.bind(this)
        })
    }
}, galleryView = function(e) {
    this.dispatcher = void 0 !== e ? e : new Dispatcher, this.device = Detectizr.device.type
}, galleryView.prototype = {
    constructor: galleryView,
    init: function() {
        this.bindEvents()
    },
    populate: function() {
      
    },
    bindEvents: function() {
        this.completeEvent = this.dispatcher.addEventlistener("AM_COMPLETE_G", this.populate.bind(this))
    }
}, videosView = function(e) {
    this.dispatcher = void 0 !== e ? e : new Dispatcher, this.device = Detectizr.device.type
}, videosView.prototype = {
    constructor: videosView,
    init: function() {
        this.bindEvents()
    },
    populate: function() {
        if ("mobile" == this.device)
            for ($("#videos_bg img").attr("src", "img/videos_mobile_bg.jpg"), i = 0; i < data.videos.list.length; i++) data.videos.list[i].show && $("#videos-list").append('<li class="video_active"><div class="video_border"></div><div class="video_label"><h1>' + data.videos.list[i].name + '</h1></div><img class="video_btn_out" src="img/arrow_trailer_out.svg" /><div class="video_btn_over"><img class="video_arrow" src="img/arrow_trailer_over.svg" /></div><img class="video_poster" src="' + data.videos.list[i].poster + '" /></li>');
        else
            for (i = 0; i < data.videos.list.length; i++) data.videos.list[i].show ? $("#videos-list").append('<li class="video_active"><div class="video_border"></div><div class="video_label"><h1>' + data.videos.list[i].name + '</h1></div><img class="video_btn_out" src="img/arrow_trailer_out.svg" /><div class="video_btn_over"><img class="video_arrow" src="img/arrow_trailer_over.svg" /></div><video class="video_video" loop muted poster="' + data.videos.list[i].poster + '"><source src="' + data.videos.list[i].video + '" type="video/mp4"></video></li>') : $("#videos-list").append('<li class="video_hidden"><div></div></li>');
        this.attachEventListeners()
    },
    bindEvents: function() {
        this.completeEvent = this.dispatcher.addEventlistener("AM_COMPLETE_G", this.populate.bind(this))
    },
    attachEventListeners: function() {
        $("#videos-list li").mouseenter(function(e) {
            $(this).hasClass("video_hidden") === !1 && $(this).find(".video_video").get(0).play(), TweenMax.set($(this).find(".video_btn_over"), {
                transformOrign: "50% 50%"
            }), TweenMax.to($(this).find(".video_border"), .25, {
                "border-width": "8px",
                ease: Power4.easeOut
            }), TweenMax.to($(this).find(".video_btn_over"), .15, {
                scale: 1,
                ease: Power4.easeOut
            }), TweenMax.to($(this).find(".video_btn_over img"), .15, {
                x: 34,
                delay: .15,
                ease: Power4.easeOut
            })
        }).mouseleave(function() {
            $(this).hasClass("video_hidden") === !1 && $(this).find(".video_video").get(0).pause(), TweenMax.to($(this).find(".video_border"), .25, {
                "border-width": "5px",
                ease: Power4.easeOut
            }), TweenMax.to($(this).find(".video_btn_over img"), .15, {
                x: 0,
                ease: Power4.easeOut
            }), TweenMax.to($(this).find(".video_btn_over"), .15, {
                scale: 0,
                delay: .15,
                ease: Power4.easeOut
            })
        }), $("#videos-list li.video_active").click(function() {
            var e = Array.prototype.slice.call(document.getElementById("videos-list").children),
                t = e.indexOf(this);
            switch (t) {
                case 0:
                    console.log(0), app.dispatcher.dispatch("CUE_PLAYLIST_INDEX", 0);
                    break;
                case 1:
                    console.log(1), app.dispatcher.dispatch("CUE_PLAYLIST_INDEX", 1);
                    break;
                case 2:
                    console.log(2), app.dispatcher.dispatch("CUE_PLAYLIST_INDEX", 2);
                    break;
                case 3:
                    console.log(3), app.dispatcher.dispatch("CUE_PLAYLIST_INDEX", 5);
                    break;
                case 4:
                    console.log(4), app.dispatcher.dispatch("CUE_PLAYLIST_INDEX", 6);
                    break;
                case 5:
                    console.log(5), app.dispatcher.dispatch("CUE_PLAYLIST_INDEX", 11)
            }
            app.dispatcher.dispatch("SHOW_TRAILER")
        })
    }
}, ticketsView = function(e) {
    this.dispatcher = void 0 !== e ? e : new Dispatcher, this.device = Detectizr.device.type
}, ticketsView.prototype = {
    constructor: ticketsView,
    init: function() {
        this.bindEvents()
    },
    populate: function() {
      
    },
    bindEvents: function() {
        this.completeEvent = this.dispatcher.addEventlistener("AM_COMPLETE_G", this.populate.bind(this))
    }
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
