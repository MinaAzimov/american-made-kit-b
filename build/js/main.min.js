var app = {
    dispatcher: new Dispatcher,
    sections: ["home_sec", "story_sec", "castncrew_sec", "gallery_sec", "videos_sec", "tickets_sec"],
    sectionNames: ["home", "story", "castncrew", "gallery", "videos", "tickets"],
    device: Detectizr.device.type,
    browser: Detectizr.browser.name,
    version: parseInt(Detectizr.browser.version),
    curDate: new Date,
    fridayDate: new Date("2016-08-08 00:00:00".replace(/-/g, "/")),
    eveDate: new Date("2016-08-11 00:00:00".replace(/-/g, "/")),
    liveDate: new Date("2016-08-12 00:00:00".replace(/-/g, "/")),
    init: function() {
        app.scrollView = new scrollView(app.dispatcher), app.scrollView.init(),
        app.homeView = new homeView(document.body, app.dispatcher), app.homeView.init(),
        app.footerView = new footerView(app.dispatcher), app.footerView.init(),
        app.storyView = new storyView(app.dispatcher), app.storyView.init(),
        app.castncrewView = new castncrewView(app.dispatcher), app.castncrewView.init(),
        app.galleryView = new galleryView(app.dispatcher), app.galleryView.init(),
        app.videosView = new videosView(app.dispatcher), app.videosView.init(),
        app.ticketsView = new ticketsView(app.dispatcher), app.ticketsView.init(), app.browserMute(), app.browserCheck(), app.dateCheck(), app.bindEvents(), app.resize();
        window.innerWidth;
        "mobile" !== app.device && app.hashCheck(), window.onbeforeunload = function() {
        
        }
    },
    onAnalyticsEvent: function(e, i) {
        ga("send", i)
    },
    resize: function(e) {
        var t = ["#home_text1", "#home_text2", "#home_text3", "#home_text4"];
        for (i = 0; i < t.length; i++) $(t[i]).css({
            left: .5 * window.innerWidth - .5 * $(t[i]).width() + "px"
        });
        "mobile" != Detectizr.device.type && $("#home_fg").css("left", .5 * window.innerWidth - .5 * $("#home_fg").width() + "px"), $("#videos_fg").css("left", .5 * window.innerWidth - .5 * $("#videos_fg").width() + "px")
    },
    browserMute: function() {
       
    },
    browserCheck: function() {
        switch (app.browser) {
            case "chrome":
                app.version <= 49 && $("#upgrade").css("display", "block");
                break;
            case "firefox":
                app.version <= 46 && $("#upgrade").css("display", "block");
                break;
            case "safari":
                app.version <= 8 && $("#upgrade").css("display", "block");
                break;
            case "ie":
                app.version <= 10 && $("#upgrade").css("display", "block");
                break;
            default:
                $("#upgrade").css("display", "none")
        }
    },
    dateCheck: function() {
        app.curDate > app.liveDate ? $(".datechange").html(data.info.live_date) : app.curDate > app.eveDate ? $(".datechange").html(data.info.eve_date) : app.curDate > app.fridayDate ? $(".datechange").html(data.info.friday_date) : $(".datechange").html(data.info.default_date)
    },
    onScroll: function(e) {
        e.preventDefault(), e.stopPropagation()
    },
    preventDefault: function(e) {
        e = e || window.event, e.preventDefault && e.preventDefault(), e.returnValue = !1
    },
    doOnOrientationChange: function() {
        switch (window.orientation) {
            case -90:
            case 90:
                app.resize();
                break;
            case 0:
                app.resize()
        }
    },
    bindEvents: function() {
        app.dispatcher.addEventlistener("ANALYTICS", app.onAnalyticsEvent), "desktop" == app.device && $(window).resize(app.resize), app.dispatcher.addEventlistener("TOGGLE_SCROLL", app.toggleScroll), window.addEventListener("orientationchange", this.doOnOrientationChange)
    },
    toggleScroll: function(e, i) {
        i ? window.ontouchmove = app.preventDefault : window.ontouchmove = null
    },
    hashCheck: function() {
        for (var e = window.location.hash.substring(1), i = 0, t = 0; t < app.sections.length; t++) app.sections[t] === e && (i = t);
        app.dispatcher.dispatch("HASH_EVENT", i)
    }
};
window.onload = app.init, Function.prototype.bind = function(e) {
    var i = this;
    return function() {
        return i.apply(e, arguments)
    }
};
var vis = function() {
    var e, i, t = {
        hidden: "visibilitychange",
        webkitHidden: "webkitvisibilitychange",
        mozHidden: "mozvisibilitychange",
        msHidden: "msvisibilitychange"
    };
    for (e in t)
        if (e in document) {
            i = t[e];
            break
        }
    return function(t) {
        return t && document.addEventListener(i, t), !document[e]
    }
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJtYWluLm1pbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0ge1xuICAgIGRpc3BhdGNoZXI6IG5ldyBEaXNwYXRjaGVyLFxuICAgIHNlY3Rpb25zOiBbXCJob21lX3NlY1wiLCBcInN0b3J5X3NlY1wiLCBcImNhc3RuY3Jld19zZWNcIiwgXCJnYWxsZXJ5X3NlY1wiLCBcInZpZGVvc19zZWNcIiwgXCJ0aWNrZXRzX3NlY1wiXSxcbiAgICBzZWN0aW9uTmFtZXM6IFtcImhvbWVcIiwgXCJzdG9yeVwiLCBcImNhc3RuY3Jld1wiLCBcImdhbGxlcnlcIiwgXCJ2aWRlb3NcIiwgXCJ0aWNrZXRzXCJdLFxuICAgIGRldmljZTogRGV0ZWN0aXpyLmRldmljZS50eXBlLFxuICAgIGJyb3dzZXI6IERldGVjdGl6ci5icm93c2VyLm5hbWUsXG4gICAgdmVyc2lvbjogcGFyc2VJbnQoRGV0ZWN0aXpyLmJyb3dzZXIudmVyc2lvbiksXG4gICAgY3VyRGF0ZTogbmV3IERhdGUsXG4gICAgZnJpZGF5RGF0ZTogbmV3IERhdGUoXCIyMDE2LTA4LTA4IDAwOjAwOjAwXCIucmVwbGFjZSgvLS9nLCBcIi9cIikpLFxuICAgIGV2ZURhdGU6IG5ldyBEYXRlKFwiMjAxNi0wOC0xMSAwMDowMDowMFwiLnJlcGxhY2UoLy0vZywgXCIvXCIpKSxcbiAgICBsaXZlRGF0ZTogbmV3IERhdGUoXCIyMDE2LTA4LTEyIDAwOjAwOjAwXCIucmVwbGFjZSgvLS9nLCBcIi9cIikpLFxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBhcHAuc2Nyb2xsVmlldyA9IG5ldyBzY3JvbGxWaWV3KGFwcC5kaXNwYXRjaGVyKSwgYXBwLnNjcm9sbFZpZXcuaW5pdCgpLFxuICAgICAgICBhcHAuaG9tZVZpZXcgPSBuZXcgaG9tZVZpZXcoZG9jdW1lbnQuYm9keSwgYXBwLmRpc3BhdGNoZXIpLCBhcHAuaG9tZVZpZXcuaW5pdCgpLFxuICAgICAgICBhcHAuZm9vdGVyVmlldyA9IG5ldyBmb290ZXJWaWV3KGFwcC5kaXNwYXRjaGVyKSwgYXBwLmZvb3RlclZpZXcuaW5pdCgpLFxuICAgICAgICBhcHAuc3RvcnlWaWV3ID0gbmV3IHN0b3J5VmlldyhhcHAuZGlzcGF0Y2hlciksIGFwcC5zdG9yeVZpZXcuaW5pdCgpLFxuICAgICAgICBhcHAuY2FzdG5jcmV3VmlldyA9IG5ldyBjYXN0bmNyZXdWaWV3KGFwcC5kaXNwYXRjaGVyKSwgYXBwLmNhc3RuY3Jld1ZpZXcuaW5pdCgpLFxuICAgICAgICBhcHAuZ2FsbGVyeVZpZXcgPSBuZXcgZ2FsbGVyeVZpZXcoYXBwLmRpc3BhdGNoZXIpLCBhcHAuZ2FsbGVyeVZpZXcuaW5pdCgpLFxuICAgICAgICBhcHAudmlkZW9zVmlldyA9IG5ldyB2aWRlb3NWaWV3KGFwcC5kaXNwYXRjaGVyKSwgYXBwLnZpZGVvc1ZpZXcuaW5pdCgpLFxuICAgICAgICBhcHAudGlja2V0c1ZpZXcgPSBuZXcgdGlja2V0c1ZpZXcoYXBwLmRpc3BhdGNoZXIpLCBhcHAudGlja2V0c1ZpZXcuaW5pdCgpLCBhcHAuYnJvd3Nlck11dGUoKSwgYXBwLmJyb3dzZXJDaGVjaygpLCBhcHAuZGF0ZUNoZWNrKCksIGFwcC5iaW5kRXZlbnRzKCksIGFwcC5yZXNpemUoKTtcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIFwibW9iaWxlXCIgIT09IGFwcC5kZXZpY2UgJiYgYXBwLmhhc2hDaGVjaygpLCB3aW5kb3cub25iZWZvcmV1bmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgXG4gICAgICAgIH1cbiAgICB9LFxuICAgIG9uQW5hbHl0aWNzRXZlbnQ6IGZ1bmN0aW9uKGUsIGkpIHtcbiAgICAgICAgZ2EoXCJzZW5kXCIsIGkpXG4gICAgfSxcbiAgICByZXNpemU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHQgPSBbXCIjaG9tZV90ZXh0MVwiLCBcIiNob21lX3RleHQyXCIsIFwiI2hvbWVfdGV4dDNcIiwgXCIjaG9tZV90ZXh0NFwiXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHQubGVuZ3RoOyBpKyspICQodFtpXSkuY3NzKHtcbiAgICAgICAgICAgIGxlZnQ6IC41ICogd2luZG93LmlubmVyV2lkdGggLSAuNSAqICQodFtpXSkud2lkdGgoKSArIFwicHhcIlxuICAgICAgICB9KTtcbiAgICAgICAgXCJtb2JpbGVcIiAhPSBEZXRlY3RpenIuZGV2aWNlLnR5cGUgJiYgJChcIiNob21lX2ZnXCIpLmNzcyhcImxlZnRcIiwgLjUgKiB3aW5kb3cuaW5uZXJXaWR0aCAtIC41ICogJChcIiNob21lX2ZnXCIpLndpZHRoKCkgKyBcInB4XCIpLCAkKFwiI3ZpZGVvc19mZ1wiKS5jc3MoXCJsZWZ0XCIsIC41ICogd2luZG93LmlubmVyV2lkdGggLSAuNSAqICQoXCIjdmlkZW9zX2ZnXCIpLndpZHRoKCkgKyBcInB4XCIpXG4gICAgfSxcbiAgICBicm93c2VyTXV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgXG4gICAgfSxcbiAgICBicm93c2VyQ2hlY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICBzd2l0Y2ggKGFwcC5icm93c2VyKSB7XG4gICAgICAgICAgICBjYXNlIFwiY2hyb21lXCI6XG4gICAgICAgICAgICAgICAgYXBwLnZlcnNpb24gPD0gNDkgJiYgJChcIiN1cGdyYWRlXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJmaXJlZm94XCI6XG4gICAgICAgICAgICAgICAgYXBwLnZlcnNpb24gPD0gNDYgJiYgJChcIiN1cGdyYWRlXCIpLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzYWZhcmlcIjpcbiAgICAgICAgICAgICAgICBhcHAudmVyc2lvbiA8PSA4ICYmICQoXCIjdXBncmFkZVwiKS5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaWVcIjpcbiAgICAgICAgICAgICAgICBhcHAudmVyc2lvbiA8PSAxMCAmJiAkKFwiI3VwZ3JhZGVcIikuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAkKFwiI3VwZ3JhZGVcIikuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIilcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGF0ZUNoZWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgYXBwLmN1ckRhdGUgPiBhcHAubGl2ZURhdGUgPyAkKFwiLmRhdGVjaGFuZ2VcIikuaHRtbChkYXRhLmluZm8ubGl2ZV9kYXRlKSA6IGFwcC5jdXJEYXRlID4gYXBwLmV2ZURhdGUgPyAkKFwiLmRhdGVjaGFuZ2VcIikuaHRtbChkYXRhLmluZm8uZXZlX2RhdGUpIDogYXBwLmN1ckRhdGUgPiBhcHAuZnJpZGF5RGF0ZSA/ICQoXCIuZGF0ZWNoYW5nZVwiKS5odG1sKGRhdGEuaW5mby5mcmlkYXlfZGF0ZSkgOiAkKFwiLmRhdGVjaGFuZ2VcIikuaHRtbChkYXRhLmluZm8uZGVmYXVsdF9kYXRlKVxuICAgIH0sXG4gICAgb25TY3JvbGw6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpXG4gICAgfSxcbiAgICBwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oZSkge1xuICAgICAgICBlID0gZSB8fCB3aW5kb3cuZXZlbnQsIGUucHJldmVudERlZmF1bHQgJiYgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnJldHVyblZhbHVlID0gITFcbiAgICB9LFxuICAgIGRvT25PcmllbnRhdGlvbkNoYW5nZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHN3aXRjaCAod2luZG93Lm9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIC05MDpcbiAgICAgICAgICAgIGNhc2UgOTA6XG4gICAgICAgICAgICAgICAgYXBwLnJlc2l6ZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGFwcC5yZXNpemUoKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiaW5kRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgYXBwLmRpc3BhdGNoZXIuYWRkRXZlbnRsaXN0ZW5lcihcIkFOQUxZVElDU1wiLCBhcHAub25BbmFseXRpY3NFdmVudCksIFwiZGVza3RvcFwiID09IGFwcC5kZXZpY2UgJiYgJCh3aW5kb3cpLnJlc2l6ZShhcHAucmVzaXplKSwgYXBwLmRpc3BhdGNoZXIuYWRkRXZlbnRsaXN0ZW5lcihcIlRPR0dMRV9TQ1JPTExcIiwgYXBwLnRvZ2dsZVNjcm9sbCksIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwgdGhpcy5kb09uT3JpZW50YXRpb25DaGFuZ2UpXG4gICAgfSxcbiAgICB0b2dnbGVTY3JvbGw6IGZ1bmN0aW9uKGUsIGkpIHtcbiAgICAgICAgaSA/IHdpbmRvdy5vbnRvdWNobW92ZSA9IGFwcC5wcmV2ZW50RGVmYXVsdCA6IHdpbmRvdy5vbnRvdWNobW92ZSA9IG51bGxcbiAgICB9LFxuICAgIGhhc2hDaGVjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGUgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSksIGkgPSAwLCB0ID0gMDsgdCA8IGFwcC5zZWN0aW9ucy5sZW5ndGg7IHQrKykgYXBwLnNlY3Rpb25zW3RdID09PSBlICYmIChpID0gdCk7XG4gICAgICAgIGFwcC5kaXNwYXRjaGVyLmRpc3BhdGNoKFwiSEFTSF9FVkVOVFwiLCBpKVxuICAgIH1cbn07XG53aW5kb3cub25sb2FkID0gYXBwLmluaXQsIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciBpID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpLmFwcGx5KGUsIGFyZ3VtZW50cylcbiAgICB9XG59O1xudmFyIHZpcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlLCBpLCB0ID0ge1xuICAgICAgICBoaWRkZW46IFwidmlzaWJpbGl0eWNoYW5nZVwiLFxuICAgICAgICB3ZWJraXRIaWRkZW46IFwid2Via2l0dmlzaWJpbGl0eWNoYW5nZVwiLFxuICAgICAgICBtb3pIaWRkZW46IFwibW96dmlzaWJpbGl0eWNoYW5nZVwiLFxuICAgICAgICBtc0hpZGRlbjogXCJtc3Zpc2liaWxpdHljaGFuZ2VcIlxuICAgIH07XG4gICAgZm9yIChlIGluIHQpXG4gICAgICAgIGlmIChlIGluIGRvY3VtZW50KSB7XG4gICAgICAgICAgICBpID0gdFtlXTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdCAmJiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGksIHQpLCAhZG9jdW1lbnRbZV1cbiAgICB9XG59KCk7Il0sImZpbGUiOiJtYWluLm1pbi5qcyJ9
//# sourceMappingURL=data:application/json;charset=utf8;base64,
